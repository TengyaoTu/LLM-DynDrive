{"question_id": 2777, "id": "sample_0", "function_name": "distinctDifferenceArray", "code": "def distinctDifferenceArray(a: List[int]) -> List[int]:\n    return [len(set(a[:i+1]))-len(set(a[i+1:]))for i in range(len(a))]", "input": "distinctDifferenceArray(a = [1, 2, 3, 4, 5])", "output": "[-3, -1, 1, 3, 5]", "numsteps": 678, "problem_id": [0, 2, 0], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "easy"}
{"question_id": 2777, "id": "sample_1", "function_name": "distinctDifferenceArray", "code": "def distinctDifferenceArray(nums: List[int]) -> List[int]:\n    r = Counter(nums)\n    l = set()\n    ans = []\n    for x in nums:\n        r[x] -= 1\n        if not r[x]:\n            del r[x]\n        l.add(x)\n        ans.append(len(l) - len(r))\n    return ans", "input": "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])", "output": "[-3, -1, 1, 3, 5]", "numsteps": 869, "problem_id": [0, 11, 0], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "easy"}
{"question_id": 2777, "id": "sample_2", "function_name": "distinctDifferenceArray", "code": "def distinctDifferenceArray(nums: List[int]) -> List[int]:\n    return [len(set(nums[:i + 1])) - len(set(nums[i + 1:])) for i in range(len(nums))]", "input": "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])", "output": "[-3, -1, 1, 3, 5]", "numsteps": 678, "problem_id": [0, 17, 0], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "easy"}
{"question_id": 2777, "id": "sample_3", "function_name": "distinctDifferenceArray", "code": "def distinctDifferenceArray(nums: List[int]) -> List[int]:\n    n = len(nums)\n    ans = []\n    for i in range(1, n + 1):\n        pref = nums[:i]\n        suff = nums[i:]\n        ans.append(len(set(pref)) - len(set(suff)))\n    return ans", "input": "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])", "output": "[-2, -1, 0, 2, 3]", "numsteps": 707, "problem_id": [0, 9, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "easy"}
{"question_id": 2777, "id": "sample_4", "function_name": "distinctDifferenceArray", "code": "def distinctDifferenceArray(nums: List[int]) -> List[int]:\n    c = collections.Counter(nums)\n    suf = len(c)\n    ca = collections.Counter()\n    ans = []\n    for num in nums:\n        c[num] -= 1\n        if c[num] == 0:\n            suf -= 1\n        ca[num] += 1\n        ans.append(len(ca) - suf)\n    return ans", "input": "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])", "output": "[-2, -1, 0, 2, 3]", "numsteps": 853, "problem_id": [0, 1, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "easy"}
{"question_id": 2777, "id": "sample_5", "function_name": "distinctDifferenceArray", "code": "def distinctDifferenceArray(nums: List[int]) -> List[int]:\n    return [len(set(nums[:(i + 1)])) - len(set(nums[(i + 1):])) for i in range(len(nums))]", "input": "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])", "output": "[-2, -1, 0, 2, 3]", "numsteps": 678, "problem_id": [0, 6, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "easy"}
{"question_id": 2779, "id": "sample_6", "function_name": "colorTheArray", "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0]*n\n    \n    curr = 0\n    \n    for i,v in queries:\n        pv = arr[i]\n        \n        if i+1 <n and arr[i+1]==v:\n            curr += 1\n        if i-1>=0 and arr[i-1] == v:\n            curr += 1\n        if i+1 <n and arr[i+1]==pv and pv:\n            curr -= 1\n        if i-1>=0 and arr[i-1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        \n        res += [curr]\n    return res", "input": "colorTheArray(n = 1, queries = [[0, 100000]])", "output": "[0]", "numsteps": 614, "problem_id": [1, 5, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "medium"}
{"question_id": 2779, "id": "sample_7", "function_name": "colorTheArray", "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret -= 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret += 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret += 1\n        ans.append(ret)\n    return ans", "input": "colorTheArray(n = 1, queries = [[0, 100000]])", "output": "[0]", "numsteps": 605, "problem_id": [1, 11, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "medium"}
{"question_id": 2779, "id": "sample_8", "function_name": "colorTheArray", "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans", "input": "colorTheArray(n = 1, queries = [[0, 100000]])", "output": "[0]", "numsteps": 604, "problem_id": [1, 9, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "medium"}
{"question_id": 2779, "id": "sample_9", "function_name": "colorTheArray", "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res", "input": "colorTheArray(n = 1, queries = [[0, 100000]])", "output": "[0]", "numsteps": 596, "problem_id": [1, 2, 1], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "medium"}
{"question_id": 2779, "id": "sample_10", "function_name": "colorTheArray", "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res -= 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res += 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res += 1\n        ans.append(res)\n    return ans", "input": "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])", "output": "[0, 1, 1, 0, 2]", "numsteps": 980, "problem_id": [1, 12, 0], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "medium"}
{"question_id": 2779, "id": "sample_11", "function_name": "colorTheArray", "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i-1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i+1] and color[i] != 0:\n            ans -= 1\n        \n        color[i] = x\n        \n        if color[i] == color[i-1]:\n            ans += 1\n        if color[i] == color[i+1]:\n            ans += 1\n            \n        out.append(ans)\n    return out", "input": "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])", "output": "[0, 1, 1, 0, 2]", "numsteps": 940, "problem_id": [1, 16, 0], "contest_id": "weekly-contest-344", "contest_date": "2023-05-07T00:00:00", "difficulty": "medium"}
{"question_id": 2792, "id": "sample_12", "function_name": "doesValidArrayExist", "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == last:\n        return True\n    last = 1\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == (1 ^ last):\n        return True\n    return False", "input": "doesValidArrayExist(derived = [1, 1, 0])", "output": "True", "numsteps": 550, "problem_id": [3, 9, 0], "contest_id": "weekly-contest-345", "contest_date": "2023-05-14T00:00:00", "difficulty": "medium"}
{"question_id": 2792, "id": "sample_13", "function_name": "doesValidArrayExist", "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]", "input": "doesValidArrayExist(derived = [1, 1, 0])", "output": "True", "numsteps": 570, "problem_id": [3, 18, 0], "contest_id": "weekly-contest-345", "contest_date": "2023-05-14T00:00:00", "difficulty": "medium"}
{"question_id": 2792, "id": "sample_14", "function_name": "doesValidArrayExist", "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0] == derived[n-1]:\n            return True\n    return False", "input": "doesValidArrayExist(derived = [1, 0])", "output": "False", "numsteps": 634, "problem_id": [3, 3, 2], "contest_id": "weekly-contest-345", "contest_date": "2023-05-14T00:00:00", "difficulty": "medium"}
{"question_id": 2792, "id": "sample_15", "function_name": "doesValidArrayExist", "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    \n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0: return True\n    \n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1: return True\n    \n    return False", "input": "doesValidArrayExist(derived = [1, 1, 0])", "output": "True", "numsteps": 541, "problem_id": [3, 8, 0], "contest_id": "weekly-contest-345", "contest_date": "2023-05-14T00:00:00", "difficulty": "medium"}
{"question_id": 2792, "id": "sample_16", "function_name": "doesValidArrayExist", "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        \n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1", "input": "doesValidArrayExist(derived = [1, 1, 0])", "output": "True", "numsteps": 590, "problem_id": [3, 5, 0], "contest_id": "weekly-contest-345", "contest_date": "2023-05-14T00:00:00", "difficulty": "medium"}
{"question_id": 2792, "id": "sample_17", "function_name": "doesValidArrayExist", "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]", "input": "doesValidArrayExist(derived = [1, 1])", "output": "True", "numsteps": 539, "problem_id": [3, 14, 1], "contest_id": "weekly-contest-345", "contest_date": "2023-05-14T00:00:00", "difficulty": "medium"}
{"question_id": 2800, "id": "sample_18", "function_name": "minLength", "code": "def minLength(s: str) -> int:\n    while \"AB\" in s or \"CD\" in s:\n        s = s.replace(\"AB\", \"\")\n        s = s.replace(\"CD\", \"\")\n    return len(s)", "input": "minLength(s = 'ABFCACDB')", "output": "2", "numsteps": 537, "problem_id": [4, 17, 0], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2800, "id": "sample_19", "function_name": "minLength", "code": "def minLength(s: str) -> int:\n    while 'AB' in s or 'CD' in s:\n        s = s.replace('AB', '').replace('CD', '')\n    return len(s)", "input": "minLength(s = 'ABFCACDB')", "output": "2", "numsteps": 531, "problem_id": [4, 8, 0], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2800, "id": "sample_20", "function_name": "minLength", "code": "def minLength(s: str) -> int:\n    \n    while 1:\n        n = len(s)\n        if n < 2:\n            break\n        for i in range(n - 1):\n            if s[i:i + 2] == \"AB\" or s[i:i + 2] == \"CD\":\n                s = s[:i] + s[i + 2:]\n                break\n        else:\n            break\n    \n    return len(s)", "input": "minLength(s = 'ACBBD')", "output": "5", "numsteps": 604, "problem_id": [4, 21, 1], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2800, "id": "sample_21", "function_name": "minLength", "code": "def minLength(s: str) -> int:\n    while \"AB\" in s or \"CD\" in s:\n        s = s.replace(\"AB\", \"\")\n        s = s.replace(\"CD\", \"\")\n    return len(s)", "input": "minLength(s = 'ACBBD')", "output": "5", "numsteps": 497, "problem_id": [4, 7, 1], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2800, "id": "sample_22", "function_name": "minLength", "code": "def minLength(s: str) -> int:\n    stack = []\n    for c in s:\n        stack.append(c)\n        if len(stack) > 1 and stack[-2] + stack[-1] in [\"AB\", \"CD\"]:\n            stack.pop()\n            stack.pop()\n            \n    return len(stack)", "input": "minLength(s = 'ABFCACDB')", "output": "2", "numsteps": 716, "problem_id": [4, 6, 0], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2800, "id": "sample_23", "function_name": "minLength", "code": "def minLength(s: str) -> int:\n    while True:\n        t=s.replace(\"AB\",\"\").replace(\"CD\",\"\")\n        if t==s:\n            return len(t)\n        else:\n            s=t", "input": "minLength(s = 'ACBBD')", "output": "5", "numsteps": 504, "problem_id": [4, 14, 1], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2816, "id": "sample_24", "function_name": "makeSmallestPalindrome", "code": "def makeSmallestPalindrome(s: str) -> str:\n    ans = []\n    for i in range(len(s) // 2):\n        ans.append(min(s[i], s[-i-1]))\n    if len(s) & 1:\n        ans = ans + [s[len(s) // 2]] + ans[::-1]\n    else:\n        ans = ans + ans[::-1]\n    return ''.join(ans)", "input": "makeSmallestPalindrome(s = 'seven')", "output": "'neven'", "numsteps": 569, "problem_id": [5, 5, 2], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2816, "id": "sample_25", "function_name": "makeSmallestPalindrome", "code": "def makeSmallestPalindrome(s: str) -> str:\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        c1, c2 = s[left], s[right]\n        if c1 != c2:\n            s[left] = min(c1, c2)\n            s[right] = s[left]\n        left += 1\n        right -= 1\n    return ''.join(s)", "input": "makeSmallestPalindrome(s = 'seven')", "output": "'neven'", "numsteps": 586, "problem_id": [5, 14, 2], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2816, "id": "sample_26", "function_name": "makeSmallestPalindrome", "code": "def makeSmallestPalindrome(s: str) -> str:\n    s = list(s)\n    n = len(s)\n    for i in range(n):\n        c = min(s[i], s[n - 1 - i])\n        s[i] = c\n        s[n - 1 - i] = c\n    return \"\".join(s)", "input": "makeSmallestPalindrome(s = 'abcd')", "output": "'abba'", "numsteps": 633, "problem_id": [5, 3, 1], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2816, "id": "sample_27", "function_name": "makeSmallestPalindrome", "code": "def makeSmallestPalindrome(s: str) -> str:\n  n = len(s)\n  result = list(s)\n  \n  for i in range(n // 2):\n    i2 = n - 1 - i\n    if result[i] == result[i2]:\n      continue\n    if result[i] < result[i2]:\n      result[i2] = result[i]\n    else:\n      result[i] = result[i2]\n  \n  return ''.join(result)", "input": "makeSmallestPalindrome(s = 'abcd')", "output": "'abba'", "numsteps": 579, "problem_id": [5, 13, 1], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2816, "id": "sample_28", "function_name": "makeSmallestPalindrome", "code": "def makeSmallestPalindrome(s: str) -> str:\n    n = len(s)\n    s = list(s)\n    \n    for i in range(n // 2):\n        x = i\n        y = n - 1 - i\n        c = min(s[x], s[y])\n        s[x] = c\n        s[y] = c\n    return \"\".join(s)", "input": "makeSmallestPalindrome(s = 'seven')", "output": "'neven'", "numsteps": 575, "problem_id": [5, 0, 2], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2816, "id": "sample_29", "function_name": "makeSmallestPalindrome", "code": "def makeSmallestPalindrome(s: str) -> str:\n    ans = []\n    for i in range(len(s) // 2):\n        ans.append(min(s[i], s[-(i + 1)]))\n    \n    a = ans[::-1]\n    if len(s) % 2:\n        ans.append(s[len(s) // 2])\n        \n    ans.extend(a)\n    return \"\".join(ans)", "input": "makeSmallestPalindrome(s = 'seven')", "output": "'neven'", "numsteps": 575, "problem_id": [5, 4, 2], "contest_id": "weekly-contest-346", "contest_date": "2023-05-21T00:00:00", "difficulty": "easy"}
{"question_id": 2819, "id": "sample_30", "function_name": "removeTrailingZeros", "code": "def removeTrailingZeros(num: str) -> str:\n    while num and num[-1] == \"0\":\n        num = num[:-1]\n    \n    return num", "input": "removeTrailingZeros(num = '51230100')", "output": "'512301'", "numsteps": 529, "problem_id": [7, 0, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "easy"}
{"question_id": 2819, "id": "sample_31", "function_name": "removeTrailingZeros", "code": "def removeTrailingZeros(num: str) -> str:\n    d = list(num)\n    while d and d[-1] == '0':\n        d.pop()\n    return ''.join(d)", "input": "removeTrailingZeros(num = '51230100')", "output": "'512301'", "numsteps": 533, "problem_id": [7, 1, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "easy"}
{"question_id": 2819, "id": "sample_32", "function_name": "removeTrailingZeros", "code": "def removeTrailingZeros(num: str) -> str:\n    while num[-1] == '0':\n        num = num[:-1]\n    return num", "input": "removeTrailingZeros(num = '51230100')", "output": "'512301'", "numsteps": 523, "problem_id": [7, 3, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "easy"}
{"question_id": 2819, "id": "sample_33", "function_name": "removeTrailingZeros", "code": "def removeTrailingZeros(num: str) -> str:\n    arr = list(num)\n    while arr and arr[-1] == \"0\":\n        arr.pop()\n    if arr:\n        return \"\".join(arr)\n    else:\n        return \"0\"", "input": "removeTrailingZeros(num = '51230100')", "output": "'512301'", "numsteps": 536, "problem_id": [7, 15, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "easy"}
{"question_id": 2819, "id": "sample_34", "function_name": "removeTrailingZeros", "code": "def removeTrailingZeros(a: str) -> str:\n    n = len(a)\n    while n - 1 >= 0 and a[n-1]=='0':\n        n -= 1\n    return a[:n]", "input": "removeTrailingZeros(a = '51230100')", "output": "'512301'", "numsteps": 552, "problem_id": [7, 9, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "easy"}
{"question_id": 2819, "id": "sample_35", "function_name": "removeTrailingZeros", "code": "def removeTrailingZeros(num: str) -> str:\n    if num.count(\"0\") == len(num):\n        return \"\"\n    return num.rstrip(\"0\")", "input": "removeTrailingZeros(num = '51230100')", "output": "'512301'", "numsteps": 499, "problem_id": [7, 18, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "easy"}
{"question_id": 2817, "id": "sample_36", "function_name": "minimumCost", "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    \n    return ans", "input": "minimumCost(s = '0011')", "output": "2", "numsteps": 553, "problem_id": [8, 0, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "medium"}
{"question_id": 2817, "id": "sample_37", "function_name": "minimumCost", "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n    \n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans", "input": "minimumCost(s = '0011')", "output": "2", "numsteps": 804, "problem_id": [8, 12, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "medium"}
{"question_id": 2817, "id": "sample_38", "function_name": "minimumCost", "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min(x + y for x, y in zip(left, right))", "input": "minimumCost(s = '0011')", "output": "2", "numsteps": 739, "problem_id": [8, 5, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "medium"}
{"question_id": 2817, "id": "sample_39", "function_name": "minimumCost", "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans", "input": "minimumCost(s = '0011')", "output": "2", "numsteps": 553, "problem_id": [8, 3, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "medium"}
{"question_id": 2817, "id": "sample_40", "function_name": "minimumCost", "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans", "input": "minimumCost(s = '0011')", "output": "2", "numsteps": 554, "problem_id": [8, 10, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "medium"}
{"question_id": 2817, "id": "sample_41", "function_name": "minimumCost", "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            r += min(i+1, n-1-i)\n    return r", "input": "minimumCost(s = '0011')", "output": "2", "numsteps": 559, "problem_id": [8, 11, 0], "contest_id": "weekly-contest-347", "contest_date": "2023-05-28T00:00:00", "difficulty": "medium"}
{"question_id": 2825, "id": "sample_42", "function_name": "minimizedStringLength", "code": "def minimizedStringLength(s: str) -> int:\n    ss = set()\n    for c in s:\n        ss.add(c)\n    return len(ss)", "input": "minimizedStringLength(s = 'cbbd')", "output": "3", "numsteps": 536, "problem_id": [9, 8, 1], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2825, "id": "sample_43", "function_name": "minimizedStringLength", "code": "def minimizedStringLength(s: str) -> int:\n    graph = collections.defaultdict(int)\n    \n    for char in s:\n        graph[char] += 1\n    \n    return len(graph)", "input": "minimizedStringLength(s = 'aaabc')", "output": "3", "numsteps": 563, "problem_id": [9, 12, 0], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2785, "id": "sample_44", "function_name": "semiOrderedPermutation", "code": "def semiOrderedPermutation(nums: List[int]) -> int:\n    n = len(nums)\n    a, b = -1, -1\n    for i, v in enumerate(nums):\n        if v == 1: a = i \n        if v == n: b = i\n    delta = 0\n    if a > b:\n        delta = 1\n    return a+n-1-b-delta", "input": "semiOrderedPermutation(nums = [2, 4, 1, 3])", "output": "3", "numsteps": 603, "problem_id": [10, 5, 1], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2785, "id": "sample_45", "function_name": "semiOrderedPermutation", "code": "def semiOrderedPermutation(nums: List[int]) -> int:\n    n = len(nums)\n    a,b = nums.index(1),nums.index(len(nums))\n    if a<b:return a+(n-b-1)\n    else:return a+(n-b-1)-1", "input": "semiOrderedPermutation(nums = [2, 4, 1, 3])", "output": "3", "numsteps": 535, "problem_id": [10, 10, 1], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2785, "id": "sample_46", "function_name": "semiOrderedPermutation", "code": "def semiOrderedPermutation(nums: List[int]) -> int:\n    n = len(nums)\n    a = nums.index(1)\n    b = nums.index(n)\n    \n    if a < b:\n        return a + n - 1 - b\n    else:\n        return a + n - 1 - b - 1", "input": "semiOrderedPermutation(nums = [2, 4, 1, 3])", "output": "3", "numsteps": 533, "problem_id": [10, 8, 1], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2785, "id": "sample_47", "function_name": "semiOrderedPermutation", "code": "def semiOrderedPermutation(nums: List[int]) -> int:\n    a, b = nums.index(1), nums.index(len(nums))\n    if a < b:\n        return a + len(nums) - b - 1\n    else:\n        return a + len(nums) - b - 2", "input": "semiOrderedPermutation(nums = [2, 4, 1, 3])", "output": "3", "numsteps": 530, "problem_id": [10, 1, 1], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2785, "id": "sample_48", "function_name": "semiOrderedPermutation", "code": "def semiOrderedPermutation(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    i = 0\n    while nums[i] != 1:\n        i += 1\n    while i > 0:\n        nums[i - 1], nums[i] = nums[i], nums[i - 1]\n        i -= 1\n        ans += 1\n    assert nums[0] == 1\n    i = 0\n    while nums[i] != n:\n        i += 1\n    while i + 1 < n:\n        nums[i + 1], nums[i] = nums[i], nums[i + 1]\n        i += 1\n        ans += 1\n    assert nums[n - 1] == n\n    return ans", "input": "semiOrderedPermutation(nums = [2, 1, 4, 3])", "output": "2", "numsteps": 668, "problem_id": [10, 9, 0], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2785, "id": "sample_49", "function_name": "semiOrderedPermutation", "code": "def semiOrderedPermutation(nums: List[int]) -> int:\n    n=len(nums)\n    l=nums.index(1)\n    r=nums.index(n)\n    ans=l+n-1-r\n    if l>r:\n        ans-=1\n    return ans", "input": "semiOrderedPermutation(nums = [2, 1, 4, 3])", "output": "2", "numsteps": 534, "problem_id": [10, 7, 0], "contest_id": "weekly-contest-348", "contest_date": "2023-06-04T00:00:00", "difficulty": "easy"}
{"question_id": 2828, "id": "sample_50", "function_name": "smallestString", "code": "def smallestString(s: str) -> str:\n    if s == \"a\"*len(s):\n        return \"a\"*(len(s)-1)+\"z\"\n    r = \"\"\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == \"a\":\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i)-1)\n        elif p == 0:\n            if i == \"a\":\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i)-1)\n        else:\n            r += i\n    return r", "input": "smallestString(s = 'acbbc')", "output": "'abaab'", "numsteps": 638, "problem_id": [12, 9, 1], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2828, "id": "sample_51", "function_name": "smallestString", "code": "def smallestString(s: str) -> str:\n    if s == 'a': return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)", "input": "smallestString(s = 'leetcode')", "output": "'kddsbncd'", "numsteps": 816, "problem_id": [12, 10, 2], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2828, "id": "sample_52", "function_name": "smallestString", "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a': i += 1\n    if i == l: return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a': break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)", "input": "smallestString(s = 'leetcode')", "output": "'kddsbncd'", "numsteps": 717, "problem_id": [12, 8, 2], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2828, "id": "sample_53", "function_name": "smallestString", "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)", "input": "smallestString(s = 'cbabc')", "output": "'baabc'", "numsteps": 590, "problem_id": [12, 1, 0], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2828, "id": "sample_54", "function_name": "smallestString", "code": "def smallestString(s: str) -> str:\n    n = len(s) \n    s = list(s)\n    i = 0 \n    while i < n and s[i] == 'a':\n        i += 1 \n    if i == n: \n        s[-1] = 'z'\n        return ''.join(s) \n    for i in range(i,n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i])-1) \n        else : break \n    return ''.join(s)", "input": "smallestString(s = 'leetcode')", "output": "'kddsbncd'", "numsteps": 717, "problem_id": [12, 11, 2], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2828, "id": "sample_55", "function_name": "smallestString", "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        else:\n            if c:\n                break\n    if not c:\n        s[-1] = 'z'\n    return \"\".join(s)", "input": "smallestString(s = 'leetcode')", "output": "'kddsbncd'", "numsteps": 724, "problem_id": [12, 0, 2], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2810, "id": "sample_56", "function_name": "minCost", "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i+j)%n])\n            mns[j] += mn\n    return min(mns)", "input": "minCost(A = [1, 2, 3], x = 4)", "output": "6", "numsteps": 799, "problem_id": [13, 10, 1], "contest_id": "weekly-contest-349", "contest_date": "2023-06-11T00:00:00", "difficulty": "medium"}
{"question_id": 2857, "id": "sample_57", "function_name": "distanceTraveled", "code": "def distanceTraveled(a: int, b: int) -> int:\n    res = 0\n    while a:\n        if a >= 5:\n            res += 5 * 10\n            a -= 5\n            if b:\n                b -= 1\n                a += 1\n        else:\n            res += a * 10\n            a = 0\n    return res", "input": "distanceTraveled(a = 1, b = 2)", "output": "10", "numsteps": 513, "problem_id": [15, 10, 1], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "easy"}
{"question_id": 2857, "id": "sample_58", "function_name": "distanceTraveled", "code": "def distanceTraveled(mainTank: int, additionalTank: int) -> int:\n    m, a = mainTank, additionalTank\n    res = 0\n    while m > 0:\n        if m < 5:\n            res += m\n            break\n        else:\n            m -= 5\n            if a > 0:\n                a -= 1\n                m += 1\n            res += 5\n    return res * 10", "input": "distanceTraveled(mainTank = 1, additionalTank = 2)", "output": "10", "numsteps": 516, "problem_id": [15, 3, 1], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "easy"}
{"question_id": 2857, "id": "sample_59", "function_name": "distanceTraveled", "code": "def distanceTraveled(mainTank: int, additionalTank: int) -> int:\n    res = 0\n    while mainTank > 0:\n        if mainTank >= 5:\n            mainTank -= 5\n            res += 50\n            if additionalTank:\n                additionalTank -= 1\n                mainTank += 1            \n        else:\n            res += mainTank * 10\n            mainTank = 0\n    return res", "input": "distanceTraveled(mainTank = 1, additionalTank = 2)", "output": "10", "numsteps": 517, "problem_id": [15, 12, 1], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "easy"}
{"question_id": 2857, "id": "sample_60", "function_name": "distanceTraveled", "code": "def distanceTraveled(mainTank: int, additionalTank: int) -> int:\n    ex = min ((mainTank - 1) // 4, additionalTank)\n    \n    return (ex + mainTank) * 10", "input": "distanceTraveled(mainTank = 1, additionalTank = 2)", "output": "10", "numsteps": 502, "problem_id": [15, 6, 1], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "easy"}
{"question_id": 2857, "id": "sample_61", "function_name": "distanceTraveled", "code": "def distanceTraveled(mainTank: int, additionalTank: int) -> int:\n    ans = 0 \n    \n    while mainTank >= 5:\n        mainTank -= 5 \n        if additionalTank:\n            additionalTank -=1 \n            mainTank += 1\n        ans += 5 \n    ans += mainTank\n    return 10 * ans", "input": "distanceTraveled(mainTank = 1, additionalTank = 2)", "output": "10", "numsteps": 503, "problem_id": [15, 2, 1], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "easy"}
{"question_id": 2857, "id": "sample_62", "function_name": "distanceTraveled", "code": "def distanceTraveled(mainTank: int, additionalTank: int) -> int:\n    \n    res=0\n    \n    while mainTank:\n        if mainTank<5:\n            res+=mainTank*10\n            mainTank=0\n        \n        else:\n            res+=5*10\n            if additionalTank:\n                mainTank+=1\n                additionalTank-=1\n            mainTank-=5\n    return res", "input": "distanceTraveled(mainTank = 1, additionalTank = 2)", "output": "10", "numsteps": 513, "problem_id": [15, 14, 1], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "easy"}
{"question_id": 2845, "id": "sample_63", "function_name": "findValueOfPartition", "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    \n    return min(y - x for x, y in zip(nums, nums[1:]))", "input": "findValueOfPartition(nums = [1, 3, 2, 4])", "output": "1", "numsteps": 568, "problem_id": [16, 9, 0], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "medium"}
{"question_id": 2845, "id": "sample_64", "function_name": "findValueOfPartition", "code": "def findValueOfPartition(nums: List[int]) -> int:\n    \n    nums.sort()\n    n = len(nums)\n    \n    ans = float('inf')\n    \n    for i in range(1,n):\n        gap = nums[i] - nums[i-1]\n        \n        ans = min(ans, gap)\n    \n    return ans", "input": "findValueOfPartition(nums = [1, 3, 2, 4])", "output": "1", "numsteps": 588, "problem_id": [16, 8, 0], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "medium"}
{"question_id": 2845, "id": "sample_65", "function_name": "findValueOfPartition", "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans", "input": "findValueOfPartition(a = [1, 3, 2, 4])", "output": "1", "numsteps": 581, "problem_id": [16, 16, 0], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "medium"}
{"question_id": 2845, "id": "sample_66", "function_name": "findValueOfPartition", "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    # 枚举最大的\n    for i in range(len(nums) - 1, 0, -1):\n        # 最大的是 nums[i]\n        # 最小的是 nums[i-1]\n        res = min(res, nums[i] - nums[i - 1])\n    return res", "input": "findValueOfPartition(nums = [1, 3, 2, 4])", "output": "1", "numsteps": 577, "problem_id": [16, 11, 0], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "medium"}
{"question_id": 2845, "id": "sample_67", "function_name": "findValueOfPartition", "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e99\n    for i in range(len(nums)-1) :\n        to_ret = min(to_ret, nums[i+1]-nums[i])\n    return to_ret", "input": "findValueOfPartition(nums = [1, 3, 2, 4])", "output": "1", "numsteps": 575, "problem_id": [16, 0, 0], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "medium"}
{"question_id": 2845, "id": "sample_68", "function_name": "findValueOfPartition", "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res", "input": "findValueOfPartition(nums = [1, 3, 2, 4])", "output": "1", "numsteps": 578, "problem_id": [16, 13, 0], "contest_id": "weekly-contest-350", "contest_date": "2023-06-18T00:00:00", "difficulty": "medium"}
{"question_id": 2831, "id": "sample_69", "function_name": "countBeautifulPairs", "code": "from math import gcd\n\ndef countBeautifulPairs(nums: List[int]) -> int:\n\n    n = len(nums)\n    \n    ct = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            f = int(str(nums[i])[0])\n            s = int(str(nums[j])[-1])\n            \n            #print(f,s)\n            \n            if gcd(s, f) == 1:\n                ct += 1\n    return ct", "input": "countBeautifulPairs(nums = [11, 21, 12])", "output": "2", "numsteps": 674, "problem_id": [19, 0, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "easy"}
{"question_id": 2831, "id": "sample_70", "function_name": "countBeautifulPairs", "code": "def countBeautifulPairs(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            ans += chk(nums[j], nums[i])\n    return ans\n\ndef chk(n1, n2):\n    return int(gcd(int(str(n1)[0]), int(str(n2)[-1])) == 1)\n\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)", "input": "countBeautifulPairs(nums = [11, 21, 12])", "output": "2", "numsteps": 730, "problem_id": [19, 5, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "easy"}
{"question_id": 2831, "id": "sample_71", "function_name": "countBeautifulPairs", "code": "def countBeautifulPairs(nums: List[int]) -> int:\n    ans = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            a = int(str(nums[i])[0])\n            b = int(str(nums[j])[-1])\n            if gcd(a, b) == 1:\n                ans += 1\n    return ans", "input": "countBeautifulPairs(nums = [11, 21, 12])", "output": "2", "numsteps": 667, "problem_id": [19, 16, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "easy"}
{"question_id": 2831, "id": "sample_72", "function_name": "countBeautifulPairs", "code": "def countBeautifulPairs(nums: List[int]) -> int:\n    res=0\n    n=len(nums)\n    for i in range(n):\n        for j in range(i+1,n):\n            a=int(str(nums[i])[0])\n            b=int(str(nums[j])[-1])\n            if gcd(a,b)==1:\n                res+=1\n    return res", "input": "countBeautifulPairs(nums = [11, 21, 12])", "output": "2", "numsteps": 667, "problem_id": [19, 13, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "easy"}
{"question_id": 2831, "id": "sample_73", "function_name": "countBeautifulPairs", "code": "def countBeautifulPairs(nums: List[int]) -> int:\n    a = []\n    b = []\n    for x in nums:\n        s = str(x)\n        a.append(int(s[0]))\n        b.append(int(s[-1]))\n    n = len(a)\n    return sum(gcd(a[i], b[j]) == 1 for i in range(n) for j in range(i+1, n))", "input": "countBeautifulPairs(nums = [2, 5, 1, 4])", "output": "5", "numsteps": 810, "problem_id": [19, 11, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "easy"}
{"question_id": 2831, "id": "sample_74", "function_name": "countBeautifulPairs", "code": "def countBeautifulPairs(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(int(str(nums[i])[0]), int(str(nums[j])[-1])) == 1:\n                ans += 1\n    return ans", "input": "countBeautifulPairs(nums = [11, 21, 12])", "output": "2", "numsteps": 649, "problem_id": [19, 1, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "easy"}
{"question_id": 2837, "id": "sample_75", "function_name": "makeTheIntegerZero", "code": "from typing import *\n\nfrom math import *\n\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1", "input": "makeTheIntegerZero(a = 3, b = -2)", "output": "3", "numsteps": 583, "problem_id": [20, 7, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2837, "id": "sample_76", "function_name": "makeTheIntegerZero", "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = num1, num2\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += (b%2 == 1)\n            cc += (b%2 == 1)*z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1", "input": "makeTheIntegerZero(num1 = 5, num2 = 7)", "output": "-1", "numsteps": 502, "problem_id": [20, 13, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2837, "id": "sample_77", "function_name": "makeTheIntegerZero", "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1", "input": "makeTheIntegerZero(num1 = 3, num2 = -2)", "output": "3", "numsteps": 574, "problem_id": [20, 4, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2837, "id": "sample_78", "function_name": "makeTheIntegerZero", "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        # print(num, x, k)\n        return x >= k and num1 - x * num2 >= x\n    \n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1", "input": "makeTheIntegerZero(num1 = 3, num2 = -2)", "output": "3", "numsteps": 787, "problem_id": [20, 17, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2837, "id": "sample_79", "function_name": "makeTheIntegerZero", "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1", "input": "makeTheIntegerZero(num1 = 3, num2 = -2)", "output": "3", "numsteps": 600, "problem_id": [20, 15, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2837, "id": "sample_80", "function_name": "makeTheIntegerZero", "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        # print(num1, s1)\n        if to_ret >= s1 :\n            return to_ret\n    return -1", "input": "makeTheIntegerZero(num1 = 3, num2 = -2)", "output": "3", "numsteps": 709, "problem_id": [20, 9, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2867, "id": "sample_81", "function_name": "numberOfGoodSubarraySplits", "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx,v in enumerate(nums):\n        if v==1:\n            tmp.append(idx)\n    # print(tmp)\n    if len(tmp)==0:return 0\n    if len(tmp)==1:return 1\n    res = 1\n    mod = 10**9+7\n    for a,b in pairwise(tmp):\n        res = res*(b-a)% mod\n    return res", "input": "numberOfGoodSubarraySplits(nums = [0, 1, 0])", "output": "1", "numsteps": 562, "problem_id": [21, 12, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2867, "id": "sample_82", "function_name": "numberOfGoodSubarraySplits", "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10**9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1,len(indexs)):\n        ans *= (indexs[i] - indexs[i-1])\n        ans %= Mod\n    return ans", "input": "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])", "output": "3", "numsteps": 622, "problem_id": [21, 6, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2867, "id": "sample_83", "function_name": "numberOfGoodSubarraySplits", "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = (ans * (i - l)) % base\n            l = i\n    return ans", "input": "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])", "output": "3", "numsteps": 605, "problem_id": [21, 5, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2867, "id": "sample_84", "function_name": "numberOfGoodSubarraySplits", "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t==0 for t in nums]) :\n        return 0\n    ttt = 10**9+7\n    base = 1\n    tmp = -1\n    for c in nums :\n        if c == 1 :\n            if tmp > 0 :\n                base = (base * tmp) % ttt\n            tmp = 1\n        elif tmp >= 0 :\n            tmp += 1\n    return base", "input": "numberOfGoodSubarraySplits(nums = [0, 1, 0])", "output": "1", "numsteps": 606, "problem_id": [21, 8, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2867, "id": "sample_85", "function_name": "numberOfGoodSubarraySplits", "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    \n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    \n    for i in range(1, len(ones)):\n        ans = (ans * (ones[i] - ones[i - 1])) % MOD\n    \n    return ans", "input": "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])", "output": "3", "numsteps": 614, "problem_id": [21, 2, 0], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2867, "id": "sample_86", "function_name": "numberOfGoodSubarraySplits", "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0", "input": "numberOfGoodSubarraySplits(nums = [0, 1, 0])", "output": "1", "numsteps": 560, "problem_id": [21, 3, 1], "contest_id": "weekly-contest-351", "contest_date": "2023-06-25T00:00:00", "difficulty": "medium"}
{"question_id": 2866, "id": "sample_87", "function_name": "longestAlternatingSubarray", "code": "def longestAlternatingSubarray(nums: List[int], t: int) -> int:\n    n=len(nums)\n    d=0\n    for i in range(n):\n        if nums[i]%2!=0 or nums[i]>t: continue\n        d=max(d,1)\n        for j in range(i+1,n):\n            if nums[j]>t: break\n            if nums[j]%2==nums[j-1]%2: break\n            d=max(d,j-i+1)\n    return d", "input": "longestAlternatingSubarray(nums = [1, 2], t = 2)", "output": "1", "numsteps": 565, "problem_id": [22, 9, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "easy"}
{"question_id": 2866, "id": "sample_88", "function_name": "longestAlternatingSubarray", "code": "def longestAlternatingSubarray(nums: List[int], threshold: int) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            li = nums[i:j + 1]\n            if li[0]%2 == 0 and all(li[k]%2 != li[k - 1]%2 for k in range(1,len(li))) and all(li[k] <= threshold for k in range(len(li))):\n                ans = max(ans, len(li))\n    return ans", "input": "longestAlternatingSubarray(nums = [1, 2], threshold = 2)", "output": "1", "numsteps": 672, "problem_id": [22, 2, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "easy"}
{"question_id": 2866, "id": "sample_89", "function_name": "longestAlternatingSubarray", "code": "def longestAlternatingSubarray(nums: List[int], threshold: int) -> int:\n    maxx = 0\n    n = len(nums)\n    for i in range(n):\n        if nums[i] % 2 != 0:\n            continue\n        for j in range(i, n):\n            if nums[j] > threshold:\n                break\n            if j > i and nums[j] % 2 == nums[j - 1] % 2:\n                break\n            maxx = max(maxx, j - i + 1)\n    return maxx", "input": "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)", "output": "3", "numsteps": 719, "problem_id": [22, 17, 0], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "easy"}
{"question_id": 2866, "id": "sample_90", "function_name": "longestAlternatingSubarray", "code": "def longestAlternatingSubarray(nums: List[int], threshold: int) -> int:\n    n = len(nums)\n    for L in range(n, 0, -1):\n        for i in range(n - L + 1):\n            tmp = nums[i:i+L]\n            if tmp[0] % 2 == 0 and all(tmp[j] % 2 != tmp[j+1] % 2 for j in range(len(tmp)-1)) and all(j <= threshold for j in tmp):\n                return L\n    return 0", "input": "longestAlternatingSubarray(nums = [1, 2], threshold = 2)", "output": "1", "numsteps": 661, "problem_id": [22, 10, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "easy"}
{"question_id": 2866, "id": "sample_91", "function_name": "longestAlternatingSubarray", "code": "def longestAlternatingSubarray(nums: List[int], threshold: int) -> int:\n    n = len(nums)\n    ans = 0\n    for l in range(n):\n        if nums[l]%2 != 0:\n            continue\n        \n        if nums[l] > threshold:\n            continue\n        \n        good = True\n        r = l+1\n        while r<n and nums[r]<=threshold and nums[r]%2 != nums[r-1]%2:\n            r += 1\n        \n        case = r-l\n        ans = max(ans, case)\n    \n    return ans", "input": "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)", "output": "3", "numsteps": 697, "problem_id": [22, 5, 0], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "easy"}
{"question_id": 2866, "id": "sample_92", "function_name": "longestAlternatingSubarray", "code": "def longestAlternatingSubarray(nums: List[int], t: int) -> int:\n    ans = 0 \n    n = len(nums)\n    f = [0]*n \n    if nums[0]%2==0 and nums[0] <= t:\n        f[0] = 1\n    for i in range(1,n):\n        if nums[i] > t:continue\n        v = nums[i]%2\n        if v == 0:\n            f[i] = 1\n        if v!= nums[i-1]%2 and f[i-1]:\n            f[i] = 1+f[i-1]\n    return max(f)", "input": "longestAlternatingSubarray(nums = [3, 2, 5, 4], t = 5)", "output": "3", "numsteps": 688, "problem_id": [22, 6, 0], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "easy"}
{"question_id": 2868, "id": "sample_93", "function_name": "continuousSubarrays", "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res", "input": "continuousSubarrays(A = [1, 2, 3])", "output": "6", "numsteps": 675, "problem_id": [24, 15, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "medium"}
{"question_id": 2868, "id": "sample_94", "function_name": "continuousSubarrays", "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i-2]+h[i-1]+h[i]+h[i+1]+h[i+2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans", "input": "continuousSubarrays(a = [1, 2, 3])", "output": "6", "numsteps": 788, "problem_id": [24, 7, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "medium"}
{"question_id": 2868, "id": "sample_95", "function_name": "continuousSubarrays", "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = 0, 0\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0: del cnt[nums[l]]\n        l += 1\n    return ans", "input": "continuousSubarrays(nums = [1, 2, 3])", "output": "6", "numsteps": 888, "problem_id": [24, 0, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "medium"}
{"question_id": 2868, "id": "sample_96", "function_name": "continuousSubarrays", "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i +1\n    return ans", "input": "continuousSubarrays(A = [1, 2, 3])", "output": "6", "numsteps": 688, "problem_id": [24, 1, 1], "contest_id": "weekly-contest-352", "contest_date": "2023-07-02T00:00:00", "difficulty": "medium"}
{"question_id": 2855, "id": "sample_97", "function_name": "maximumJumps", "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1]*len(nums)\n    dp[0] = 0\n    for i in range(1,len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j]-nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j]+1 else dp[j]+1\n    return dp[-1]", "input": "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)", "output": "-1", "numsteps": 841, "problem_id": [27, 5, 2], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2855, "id": "sample_98", "function_name": "maximumJumps", "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i]+1)\n    return dp[-1]", "input": "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)", "output": "-1", "numsteps": 728, "problem_id": [27, 14, 2], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2855, "id": "sample_99", "function_name": "maximumJumps", "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res", "input": "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)", "output": "-1", "numsteps": 889, "problem_id": [27, 7, 2], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2855, "id": "sample_100", "function_name": "maximumJumps", "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]", "input": "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)", "output": "3", "numsteps": 996, "problem_id": [27, 6, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2855, "id": "sample_101", "function_name": "maximumJumps", "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)", "input": "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)", "output": "-1", "numsteps": 878, "problem_id": [27, 11, 2], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2855, "id": "sample_102", "function_name": "maximumJumps", "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]", "input": "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)", "output": "-1", "numsteps": 720, "problem_id": [27, 0, 2], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2869, "id": "sample_103", "function_name": "maxNonDecreasingLength", "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (\n            max(a + 1 if nums1[i] >= nums1[i - 1] else 1,\n                b + 1 if nums1[i] >= nums2[i - 1] else 1),\n            max(a + 1 if nums2[i] >= nums1[i - 1] else 1,\n                b + 1 if nums2[i] >= nums2[i - 1] else 1),\n        )\n        y = max(y, a, b)\n    return y", "input": "maxNonDecreasingLength(nums1 = [2, 3, 1], nums2 = [1, 2, 1])", "output": "2", "numsteps": 688, "problem_id": [28, 16, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2869, "id": "sample_104", "function_name": "maxNonDecreasingLength", "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = x, y, t1, t2\n    return ans", "input": "maxNonDecreasingLength(a = [1, 3, 2, 1], b = [2, 2, 3, 4])", "output": "4", "numsteps": 841, "problem_id": [28, 3, 1], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2878, "id": "sample_105", "function_name": "checkArray", "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True", "input": "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)", "output": "True", "numsteps": 871, "problem_id": [29, 7, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2878, "id": "sample_106", "function_name": "checkArray", "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True", "input": "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)", "output": "True", "numsteps": 749, "problem_id": [29, 0, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2878, "id": "sample_107", "function_name": "checkArray", "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n        \n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        \n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    \n    n = len(set(queue))\n    return n == 1", "input": "checkArray(nums = [1, 3, 1, 1], k = 2)", "output": "False", "numsteps": 612, "problem_id": [29, 1, 1], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2878, "id": "sample_108", "function_name": "checkArray", "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)", "input": "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)", "output": "True", "numsteps": 843, "problem_id": [29, 15, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2878, "id": "sample_109", "function_name": "checkArray", "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0]*(len(nums)+1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i+k >= len(nums)+1:\n                return False\n            diff[i+k] -= nums[i]-curr\n            curr = nums[i]\n    return True", "input": "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)", "output": "True", "numsteps": 734, "problem_id": [29, 5, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2878, "id": "sample_110", "function_name": "checkArray", "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    \n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        \n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        \n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n            \n    return max(nums) == 0", "input": "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)", "output": "True", "numsteps": 817, "problem_id": [29, 4, 0], "contest_id": "weekly-contest-353", "contest_date": "2023-07-09T00:00:00", "difficulty": "medium"}
{"question_id": 2891, "id": "sample_111", "function_name": "maximumBeauty", "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans", "input": "maximumBeauty(nums = [4, 6, 1, 2], k = 2)", "output": "3", "numsteps": 654, "problem_id": [31, 3, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2891, "id": "sample_112", "function_name": "maximumBeauty", "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans", "input": "maximumBeauty(nums = [4, 6, 1, 2], k = 2)", "output": "3", "numsteps": 712, "problem_id": [31, 7, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2891, "id": "sample_113", "function_name": "maximumBeauty", "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res", "input": "maximumBeauty(nums = [1, 1, 1, 1], k = 10)", "output": "4", "numsteps": 637, "problem_id": [31, 6, 1], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2891, "id": "sample_114", "function_name": "maximumBeauty", "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i]-nums[i0] > 2*k:\n            i0+=1\n        answer = max(answer, i-i0+1)\n    return answer", "input": "maximumBeauty(nums = [1, 1, 1, 1], k = 10)", "output": "4", "numsteps": 609, "problem_id": [31, 4, 1], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2891, "id": "sample_115", "function_name": "maximumBeauty", "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans", "input": "maximumBeauty(nums = [4, 6, 1, 2], k = 2)", "output": "3", "numsteps": 654, "problem_id": [31, 15, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2891, "id": "sample_116", "function_name": "maximumBeauty", "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2*k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres", "input": "maximumBeauty(nums = [1, 1, 1, 1], k = 10)", "output": "4", "numsteps": 683, "problem_id": [31, 10, 1], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2888, "id": "sample_117", "function_name": "minimumIndex", "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key = lambda y: counts[y])\n    \n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        \n        left = i + 1\n        right = len(nums) - i - 1\n        \n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n        \n    return -1", "input": "minimumIndex(nums = [1, 2, 2, 2])", "output": "2", "numsteps": 728, "problem_id": [32, 8, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2888, "id": "sample_118", "function_name": "minimumIndex", "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = 0, 0\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1", "input": "minimumIndex(nums = [1, 2, 2, 2])", "output": "2", "numsteps": 688, "problem_id": [32, 7, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2888, "id": "sample_119", "function_name": "minimumIndex", "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > (n - i - 1):\n            return i\n    return -1", "input": "minimumIndex(nums = [1, 2, 2, 2])", "output": "2", "numsteps": 712, "problem_id": [32, 13, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2888, "id": "sample_120", "function_name": "minimumIndex", "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max((v, k) for k, v in c.items())[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    \n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0: return i\n    return -1", "input": "minimumIndex(nums = [1, 2, 2, 2])", "output": "2", "numsteps": 713, "problem_id": [32, 5, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2888, "id": "sample_121", "function_name": "minimumIndex", "code": "from collections import defaultdict\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i]*2>len(nums):dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums)-upto\n        if other[dom]*2>upto and dct[dom]*2>la:return upto-1\n    return -1", "input": "minimumIndex(nums = [1, 2, 2, 2])", "output": "2", "numsteps": 794, "problem_id": [32, 15, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2888, "id": "sample_122", "function_name": "minimumIndex", "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums) \n    C = Counter(nums)\n    m = max(C.values()) \n\n    if n >= m * 2: return -1\n    x = 0\n    for t in C: \n        if C[t] == m: x = t \n    print(n,m,x)\n    c = 0 \n    for i,y in enumerate(nums):\n        c += y == x \n        if c * 2 > i + 1:\n            if (C[x]-c) * 2 > n - (i+1):\n                return i \n    return -1", "input": "minimumIndex(nums = [1, 2, 2, 2])", "output": "2", "numsteps": 704, "problem_id": [32, 11, 0], "contest_id": "weekly-contest-354", "contest_date": "2023-07-16T00:00:00", "difficulty": "medium"}
{"question_id": 2881, "id": "sample_123", "function_name": "splitWordsBySeparator", "code": "def splitWordsBySeparator(words: List[str], separator: str) -> List[str]:\n    answer = []\n    \n    for w in words:\n        answer.extend([c for c in w.split(separator) if c != ''])\n        \n    return answer", "input": "splitWordsBySeparator(words = ['one.two.three', 'four.five', 'six'], separator = '.')", "output": "['one', 'two', 'three', 'four', 'five', 'six']", "numsteps": 664, "problem_id": [34, 2, 0], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "easy"}
{"question_id": 2881, "id": "sample_124", "function_name": "splitWordsBySeparator", "code": "def splitWordsBySeparator(words: List[str], separator: str) -> List[str]:\n    ans = []\n    for i in words:\n        for j in i.split(separator):\n            if j:\n                ans.append(j)\n    return ans", "input": "splitWordsBySeparator(words = ['|||'], separator = '|')", "output": "[]", "numsteps": 561, "problem_id": [34, 16, 2], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "easy"}
{"question_id": 2881, "id": "sample_125", "function_name": "splitWordsBySeparator", "code": "def splitWordsBySeparator(words: List[str], separator: str) -> List[str]:\n    ans = []\n    for w in words:\n        ans.extend(w.split(separator))\n        \n    return [s for s in ans if s]", "input": "splitWordsBySeparator(words = ['|||'], separator = '|')", "output": "[]", "numsteps": 571, "problem_id": [34, 1, 2], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "easy"}
{"question_id": 2881, "id": "sample_126", "function_name": "splitWordsBySeparator", "code": "def splitWordsBySeparator(words: List[str], separator: str) -> List[str]:\n    A = separator.join(words).split(separator)\n    return [w for w in A if w]", "input": "splitWordsBySeparator(words = ['one.two.three', 'four.five', 'six'], separator = '.')", "output": "['one', 'two', 'three', 'four', 'five', 'six']", "numsteps": 591, "problem_id": [34, 24, 0], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "easy"}
{"question_id": 2881, "id": "sample_127", "function_name": "splitWordsBySeparator", "code": "def splitWordsBySeparator(words: List[str], separator: str) -> List[str]:\n    ans = []\n    for w in words:\n        ans.extend([x for x in w.split(separator) if x])\n    return ans", "input": "splitWordsBySeparator(words = ['$easy$', '$problem$'], separator = '$')", "output": "['easy', 'problem']", "numsteps": 615, "problem_id": [34, 7, 1], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "easy"}
{"question_id": 2881, "id": "sample_128", "function_name": "splitWordsBySeparator", "code": "def splitWordsBySeparator(a: List[str], b: str) -> List[str]:\n    res = []\n    for x in a:\n        res.extend(w for w in x.split(b) if w)\n    return res", "input": "splitWordsBySeparator(a = ['|||'], b = '|')", "output": "[]", "numsteps": 571, "problem_id": [34, 4, 2], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "easy"}
{"question_id": 2919, "id": "sample_129", "function_name": "maxIncreasingGroups", "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = 0, 0\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n", "input": "maxIncreasingGroups(u = [2, 1, 2])", "output": "2", "numsteps": 656, "problem_id": [36, 3, 1], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "hard"}
{"question_id": 2919, "id": "sample_130", "function_name": "maxIncreasingGroups", "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n\n        a = (total * 2 // k - k - 1) // 2\n        while ((a + 1) + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res", "input": "maxIncreasingGroups(A = [1, 1])", "output": "1", "numsteps": 759, "problem_id": [36, 15, 2], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "hard"}
{"question_id": 2919, "id": "sample_131", "function_name": "maxIncreasingGroups", "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans", "input": "maxIncreasingGroups(x = [1, 2, 5])", "output": "3", "numsteps": 593, "problem_id": [36, 5, 0], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "hard"}
{"question_id": 2919, "id": "sample_132", "function_name": "maxIncreasingGroups", "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = 1, len(usageLimits)\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0", "input": "maxIncreasingGroups(usageLimits = [2, 1, 2])", "output": "2", "numsteps": 774, "problem_id": [36, 13, 1], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "hard"}
{"question_id": 2919, "id": "sample_133", "function_name": "maxIncreasingGroups", "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    \n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n        \n    ans = 0\n    \n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n            \n    return ans", "input": "maxIncreasingGroups(usageLimits = [1, 2, 5])", "output": "3", "numsteps": 654, "problem_id": [36, 1, 0], "contest_id": "weekly-contest-355", "contest_date": "2023-07-23T00:00:00", "difficulty": "hard"}
{"question_id": 2876, "id": "sample_134", "function_name": "numberOfEmployeesWhoMetTarget", "code": "def numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    \n    return sum(i>=target for i in hours )", "input": "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)", "output": "0", "numsteps": 576, "problem_id": [37, 8, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "easy"}
{"question_id": 2876, "id": "sample_135", "function_name": "numberOfEmployeesWhoMetTarget", "code": "def numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    return len([t for t in hours if t >= target])", "input": "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)", "output": "0", "numsteps": 556, "problem_id": [37, 10, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "easy"}
{"question_id": 2876, "id": "sample_136", "function_name": "numberOfEmployeesWhoMetTarget", "code": "def numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    \n    return sum(h>=target for h in hours)", "input": "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)", "output": "0", "numsteps": 576, "problem_id": [37, 4, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "easy"}
{"question_id": 2876, "id": "sample_137", "function_name": "numberOfEmployeesWhoMetTarget", "code": "def numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    ans = 0\n    for i in hours:\n        if i >= target:\n            ans += 1\n    return ans", "input": "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)", "output": "3", "numsteps": 570, "problem_id": [37, 5, 0], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "easy"}
{"question_id": 2876, "id": "sample_138", "function_name": "numberOfEmployeesWhoMetTarget", "code": "def numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    return len([x for x in hours if x >= target])", "input": "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)", "output": "3", "numsteps": 565, "problem_id": [37, 1, 0], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "easy"}
{"question_id": 2876, "id": "sample_139", "function_name": "numberOfEmployeesWhoMetTarget", "code": "from typing import *\n\nfrom math import *\n\n\n\ndef numberOfEmployeesWhoMetTarget(hours: List[int], target: int) -> int:\n    return len([i for i in hours if i >= target])", "input": "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)", "output": "0", "numsteps": 566, "problem_id": [37, 7, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "easy"}
{"question_id": 2856, "id": "sample_140", "function_name": "countCompleteSubarrays", "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans", "input": "countCompleteSubarrays(nums = [5, 5, 5, 5])", "output": "10", "numsteps": 794, "problem_id": [38, 1, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "medium"}
{"question_id": 2856, "id": "sample_141", "function_name": "countCompleteSubarrays", "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans", "input": "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])", "output": "4", "numsteps": 914, "problem_id": [38, 10, 0], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "medium"}
{"question_id": 2856, "id": "sample_142", "function_name": "countCompleteSubarrays", "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)) :\n        set_t = set()\n        for j in range(i, len(nums)) :\n            set_t.add(nums[j])\n            if len(set_t) == setn :\n                to_ret += 1\n    return to_ret", "input": "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])", "output": "4", "numsteps": 900, "problem_id": [38, 9, 0], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "medium"}
{"question_id": 2856, "id": "sample_143", "function_name": "countCompleteSubarrays", "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i,n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans", "input": "countCompleteSubarrays(nums = [5, 5, 5, 5])", "output": "10", "numsteps": 684, "problem_id": [38, 3, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "medium"}
{"question_id": 2856, "id": "sample_144", "function_name": "countCompleteSubarrays", "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret", "input": "countCompleteSubarrays(nums = [5, 5, 5, 5])", "output": "10", "numsteps": 684, "problem_id": [38, 14, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "medium"}
{"question_id": 2856, "id": "sample_145", "function_name": "countCompleteSubarrays", "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans", "input": "countCompleteSubarrays(nums = [5, 5, 5, 5])", "output": "10", "numsteps": 798, "problem_id": [38, 12, 1], "contest_id": "weekly-contest-356", "contest_date": "2023-07-30T00:00:00", "difficulty": "medium"}
{"question_id": 2886, "id": "sample_146", "function_name": "finalString", "code": "def finalString(s: str) -> str:\n    stk = []\n    for i in s:\n        if i =='i':\n            stk.reverse()\n        else:\n            stk.append(i)\n    return \"\".join(stk)", "input": "finalString(s = 'poiinter')", "output": "'ponter'", "numsteps": 614, "problem_id": [41, 7, 1], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "easy"}
{"question_id": 2886, "id": "sample_147", "function_name": "finalString", "code": "def finalString(s: str) -> str:\n    res = []\n    for x in s: \n        if x == 'i': \n            res = res[::-1]\n        else: \n            res.append(x)\n    return ''.join(res)", "input": "finalString(s = 'string')", "output": "'rtsng'", "numsteps": 588, "problem_id": [41, 13, 0], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "easy"}
{"question_id": 2886, "id": "sample_148", "function_name": "finalString", "code": "def finalString(s: str) -> str:\n    res = []\n    for c in s:\n        if c == 'i':\n            res = res[::-1]\n        else:\n            res.append(c)\n    return ''.join(res)", "input": "finalString(s = 'poiinter')", "output": "'ponter'", "numsteps": 620, "problem_id": [41, 16, 1], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "easy"}
{"question_id": 2886, "id": "sample_149", "function_name": "finalString", "code": "from typing import *\n\nfrom math import *\n\ndef finalString(s: str) -> str:\n    a = \"\"\n    for i in s:\n        if i == 'i':\n            a = a[::-1]\n        else:\n            a += i\n    return a", "input": "finalString(s = 'string')", "output": "'rtsng'", "numsteps": 590, "problem_id": [41, 2, 0], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "easy"}
{"question_id": 2886, "id": "sample_150", "function_name": "finalString", "code": "def finalString(s: str) -> str:\n    ans = \"\"\n    for i in s:\n        if i != 'i':\n            ans += i\n        else:\n            ans = ans[::-1]\n    return ans", "input": "finalString(s = 'string')", "output": "'rtsng'", "numsteps": 580, "problem_id": [41, 1, 0], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "easy"}
{"question_id": 2886, "id": "sample_151", "function_name": "finalString", "code": "def finalString(s: str) -> str:\n    ans = ''\n    for c in s:\n        if c == 'i':\n            ans = ans[::-1]\n        else:\n            ans += c\n    return ans", "input": "finalString(s = 'string')", "output": "'rtsng'", "numsteps": 580, "problem_id": [41, 10, 0], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "easy"}
{"question_id": 2916, "id": "sample_152", "function_name": "canSplitArray", "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False", "input": "canSplitArray(nums = [2, 1, 3], m = 5)", "output": "False", "numsteps": 554, "problem_id": [42, 17, 1], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "medium"}
{"question_id": 2916, "id": "sample_153", "function_name": "canSplitArray", "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1]+i)\n    @lru_cache(None)\n    def dp(i,j):\n        if j-i==1:\n            return True\n        for k in range(i+1,j):\n            if k!=j-1 and sums[j]-sums[k]<m:\n                continue\n            if k!=i+1 and sums[k]-sums[i]<m:\n                continue\n            if dp(i,k) and dp(k,j):return True\n        return False\n    return dp(0,len(nums))", "input": "canSplitArray(nums = [2, 1, 3], m = 5)", "output": "False", "numsteps": 839, "problem_id": [42, 7, 1], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "medium"}
{"question_id": 2916, "id": "sample_154", "function_name": "canSplitArray", "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <3:\n        return True\n    for i,v in enumerate(nums):\n        if i+1 >= len(nums):\n            continue\n        if v + nums[i+1] >= m:\n            return True\n    return False", "input": "canSplitArray(nums = [2, 1, 3], m = 5)", "output": "False", "numsteps": 584, "problem_id": [42, 15, 1], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "medium"}
{"question_id": 2916, "id": "sample_155", "function_name": "canSplitArray", "code": "from typing import *\n\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <=2:\n        return True\n    for i in range(len(nums)-1):\n        if sum(nums[i:i+2]) >= m:\n            return True\n    return False", "input": "canSplitArray(nums = [2, 1, 3], m = 5)", "output": "False", "numsteps": 564, "problem_id": [42, 2, 1], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "medium"}
{"question_id": 2916, "id": "sample_156", "function_name": "canSplitArray", "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False", "input": "canSplitArray(nums = [2, 3, 3, 2, 3], m = 6)", "output": "True", "numsteps": 554, "problem_id": [42, 12, 2], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "medium"}
{"question_id": 2916, "id": "sample_157", "function_name": "canSplitArray", "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False", "input": "canSplitArray(nums = [2, 3, 3, 2, 3], m = 6)", "output": "True", "numsteps": 554, "problem_id": [42, 6, 2], "contest_id": "weekly-contest-357", "contest_date": "2023-08-06T00:00:00", "difficulty": "medium"}
{"question_id": 2902, "id": "sample_158", "function_name": "maxSum", "code": "def maxSum(nums: List[int]) -> int:\n    n = len(nums)\n    res = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if max(list(str(nums[i]))) == max(list(str(nums[j]))):\n                res = max(res, nums[i] + nums[j])\n    return res", "input": "maxSum(nums = [1, 2, 3, 4])", "output": "-1", "numsteps": 713, "problem_id": [43, 5, 1], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "easy"}
{"question_id": 2902, "id": "sample_159", "function_name": "maxSum", "code": "def maxSum(nums: List[int]) -> int:\n    \n    ans = -1\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if max(str(nums[i]))==max(str(nums[j])):\n                ans = max(ans,nums[i]+nums[j])\n    return ans", "input": "maxSum(nums = [1, 2, 3, 4])", "output": "-1", "numsteps": 694, "problem_id": [43, 15, 1], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "easy"}
{"question_id": 2902, "id": "sample_160", "function_name": "maxSum", "code": "def maxSum(nums: List[int]) -> int:\n    ans = -1\n    d = defaultdict(list)\n    for x in nums:\n        d[max(map(int,str(x)))].append(x)\n    for i in range(10):\n        if len(d[i]) < 2:\n            continue\n        d[i].sort()\n        ans = max(ans, d[i][-1] + d[i][-2])\n    return ans", "input": "maxSum(nums = [1, 2, 3, 4])", "output": "-1", "numsteps": 737, "problem_id": [43, 21, 1], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "easy"}
{"question_id": 2902, "id": "sample_161", "function_name": "maxSum", "code": "def maxSum(nums: List[int]) -> int:\n    n = len(nums)\n    ans = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if max(str(nums[i])) == max(str(nums[j])):\n                ans = max(ans, nums[i] + nums[j])\n    return ans", "input": "maxSum(nums = [1, 2, 3, 4])", "output": "-1", "numsteps": 689, "problem_id": [43, 3, 1], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "easy"}
{"question_id": 2902, "id": "sample_162", "function_name": "maxSum", "code": "def maxSum(nums: List[int]) -> int:\n    dc = defaultdict(list)\n    for v in nums:\n        dc[max([int(c) for c in str(v)])].append(v)\n    res = -1\n    for d in range(10):\n        lst = dc[d]\n        if len(lst) >= 2:\n            res = max(res, sum(sorted(lst)[-2:]))\n    return res", "input": "maxSum(nums = [51, 71, 17, 24, 42])", "output": "88", "numsteps": 921, "problem_id": [43, 16, 0], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "easy"}
{"question_id": 2902, "id": "sample_163", "function_name": "maxSum", "code": "def maxSum(nums: List[int]) -> int:\n    ans = -1\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if max(w for w in str(nums[i])) == max(w for w in str(nums[j])):\n                cur = nums[i]+nums[j]\n                if cur > ans:\n                    ans = cur\n    return ans", "input": "maxSum(nums = [1, 2, 3, 4])", "output": "-1", "numsteps": 941, "problem_id": [43, 2, 1], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "easy"}
{"question_id": 3000, "id": "sample_164", "function_name": "minAbsoluteDifference", "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i,c in enumerate(nums):\n        if i>=x:\n            bisect.insort(st,nums[i-x])\n            p = bisect.bisect_left(st,c) \n            if p>0:\n                ans = min(ans,c-st[p-1])\n            if p<len(st):\n                ans = min(ans,st[p]-c)\n    return ans", "input": "minAbsoluteDifference(nums = [1, 2, 3, 4], x = 3)", "output": "3", "numsteps": 601, "problem_id": [44, 11, 2], "contest_id": "weekly-contest-358", "contest_date": "2023-08-13T00:00:00", "difficulty": "medium"}
{"question_id": 2977, "id": "sample_165", "function_name": "isAcronym", "code": "def isAcronym(words: List[str], s: str) -> bool:\n    t = ''\n    for w in words:\n        t += w[0]\n    return t == s", "input": "isAcronym(words = ['alice', 'bob', 'charlie'], s = 'abc')", "output": "True", "numsteps": 547, "problem_id": [45, 7, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "easy"}
{"question_id": 2977, "id": "sample_166", "function_name": "isAcronym", "code": "def isAcronym(words: List[str], s: str) -> bool:\n    \n    return s == \"\".join([w[0] for w in words])", "input": "isAcronym(words = ['an', 'apple'], s = 'a')", "output": "False", "numsteps": 538, "problem_id": [45, 3, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "easy"}
{"question_id": 2977, "id": "sample_167", "function_name": "isAcronym", "code": "def isAcronym(words: List[str], s: str) -> bool:\n    ss = \"\"\n    for w in words:\n        ss+=w[0]\n    return s == ss", "input": "isAcronym(words = ['an', 'apple'], s = 'a')", "output": "False", "numsteps": 536, "problem_id": [45, 9, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "easy"}
{"question_id": 2977, "id": "sample_168", "function_name": "isAcronym", "code": "def isAcronym(words: List[str], s: str) -> bool:\n    res = ''\n    for w in words:\n        res += w[0]\n    \n    return res == s", "input": "isAcronym(words = ['an', 'apple'], s = 'a')", "output": "False", "numsteps": 536, "problem_id": [45, 17, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "easy"}
{"question_id": 2977, "id": "sample_169", "function_name": "isAcronym", "code": "def isAcronym(words: List[str], s: str) -> bool:\n    ans = []\n    for w in words:\n        ans.append(w[:1])\n    return s == ''.join(ans)", "input": "isAcronym(words = ['alice', 'bob', 'charlie'], s = 'abc')", "output": "True", "numsteps": 559, "problem_id": [45, 15, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "easy"}
{"question_id": 2977, "id": "sample_170", "function_name": "isAcronym", "code": "def isAcronym(words: List[str], s: str) -> bool:\n    t = \"\"\n    for c in words:\n        t += c[0]\n    return t == s", "input": "isAcronym(words = ['an', 'apple'], s = 'a')", "output": "False", "numsteps": 536, "problem_id": [45, 16, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "easy"}
{"question_id": 2811, "id": "sample_171", "function_name": "minimumSum", "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if (k - now) not in st:\n            st.add(now)\n            arr.append(now)\n        \n        now += 1\n    return sum(arr)", "input": "minimumSum(n = 2, k = 6)", "output": "3", "numsteps": 571, "problem_id": [46, 7, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2811, "id": "sample_172", "function_name": "minimumSum", "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans)<n:\n        while k-cur in st:\n            cur+=1\n        ans.append(cur)\n        st.add(cur)\n        s+=cur\n        cur+=1\n    return s", "input": "minimumSum(n = 2, k = 6)", "output": "3", "numsteps": 582, "problem_id": [46, 4, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2811, "id": "sample_173", "function_name": "minimumSum", "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k-x not in seen:\n            seen.add(x)\n    \n    return sum(seen)", "input": "minimumSum(n = 2, k = 6)", "output": "3", "numsteps": 556, "problem_id": [46, 2, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2811, "id": "sample_174", "function_name": "minimumSum", "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    \n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))", "input": "minimumSum(n = 2, k = 6)", "output": "3", "numsteps": 558, "problem_id": [46, 16, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2811, "id": "sample_175", "function_name": "minimumSum", "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)", "input": "minimumSum(n = 2, k = 6)", "output": "3", "numsteps": 571, "problem_id": [46, 1, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2811, "id": "sample_176", "function_name": "minimumSum", "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)", "input": "minimumSum(n = 2, k = 6)", "output": "3", "numsteps": 556, "problem_id": [46, 13, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2979, "id": "sample_177", "function_name": "maximizeTheProfit", "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n\n    return max(f)", "input": "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 10], [1, 3, 2]])", "output": "10", "numsteps": 776, "problem_id": [47, 11, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2979, "id": "sample_178", "function_name": "maximizeTheProfit", "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]", "input": "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 10], [1, 3, 2]])", "output": "10", "numsteps": 840, "problem_id": [47, 1, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2979, "id": "sample_179", "function_name": "maximizeTheProfit", "code": "import heapq\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans", "input": "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 10], [1, 3, 2]])", "output": "10", "numsteps": 732, "problem_id": [47, 13, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2979, "id": "sample_180", "function_name": "maximizeTheProfit", "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]", "input": "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 10], [1, 3, 2]])", "output": "10", "numsteps": 881, "problem_id": [47, 9, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2979, "id": "sample_181", "function_name": "maximizeTheProfit", "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]==j:\n            dp[j]=max(dp[j],dp[offers[po][0]-1]+offers[po][2])\n            po+=1\n    return dp[n-1]", "input": "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 2], [1, 3, 2]])", "output": "3", "numsteps": 857, "problem_id": [47, 5, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2979, "id": "sample_182", "function_name": "maximizeTheProfit", "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    \n    prev = collections.defaultdict(list)\n    \n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n        \n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    # print(best)\n    return best[N]", "input": "maximizeTheProfit(N = 5, offers = [[0, 0, 1], [0, 2, 2], [1, 3, 2]])", "output": "3", "numsteps": 829, "problem_id": [47, 15, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2832, "id": "sample_183", "function_name": "longestEqualSubarray", "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans", "input": "longestEqualSubarray(nums = [1, 1, 2, 2, 1, 1], k = 2)", "output": "4", "numsteps": 819, "problem_id": [48, 11, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2832, "id": "sample_184", "function_name": "longestEqualSubarray", "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n+1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n+1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed]-cs[i][st]+1-(ed-st+1) > k:\n                st += 1\n            ans = max(ans, ed-st+1)\n    return ans", "input": "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)", "output": "3", "numsteps": 973, "problem_id": [48, 4, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2832, "id": "sample_185", "function_name": "longestEqualSubarray", "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j-i + 1)\n    return ans", "input": "longestEqualSubarray(A = [1, 1, 2, 2, 1, 1], K = 2)", "output": "4", "numsteps": 821, "problem_id": [48, 2, 1], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2832, "id": "sample_186", "function_name": "longestEqualSubarray", "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    \n    n = len(nums)\n    can = n-k\n    \n    table = defaultdict(list)        \n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0    \n    \n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r]-lst[l]>=(r-l+1)+k:\n                l+=1\n            ans = max(ans,r-l+1)\n    return ans", "input": "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)", "output": "3", "numsteps": 874, "problem_id": [48, 5, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 2832, "id": "sample_187", "function_name": "longestEqualSubarray", "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i-1] - 1\n            while cnt > k:\n                cnt -= l[j+1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans", "input": "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)", "output": "3", "numsteps": 840, "problem_id": [48, 6, 0], "contest_id": "weekly-contest-359", "contest_date": "2023-08-20T00:00:00", "difficulty": "medium"}
{"question_id": 3019, "id": "sample_188", "function_name": "furthestDistanceFromOrigin", "code": "def furthestDistanceFromOrigin(moves: str) -> int:\n    left = 0\n    right = 0\n    a = 0\n    ret = 0\n    for c in moves:\n        if c == 'L':\n            left += 1\n        elif c == 'R':\n            right += 1\n        else:\n            a += 1\n    ret = max(ret, abs(left-right)+a)\n    return ret", "input": "furthestDistanceFromOrigin(moves = 'L_RL__R')", "output": "3", "numsteps": 637, "problem_id": [49, 7, 0], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "easy"}
{"question_id": 3019, "id": "sample_189", "function_name": "furthestDistanceFromOrigin", "code": "def furthestDistanceFromOrigin(moves: str) -> int:\n    p=0\n    cnt=0\n    for c in moves:\n        if c==\"L\":\n            p-=1\n        elif c==\"R\":\n            p+=1\n        else:\n            cnt+=1\n    return abs(p)+cnt", "input": "furthestDistanceFromOrigin(moves = 'L_RL__R')", "output": "3", "numsteps": 623, "problem_id": [49, 12, 0], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "easy"}
{"question_id": 3019, "id": "sample_190", "function_name": "furthestDistanceFromOrigin", "code": "def furthestDistanceFromOrigin(moves: str) -> int:\n    s = 0\n    bal = 0\n    for i in moves:\n        if i == 'L':\n            bal -= 1\n        if i == 'R':\n            bal += 1\n        if i == '_':\n            s += 1\n        \n    return abs(bal) + s", "input": "furthestDistanceFromOrigin(moves = '_______')", "output": "7", "numsteps": 668, "problem_id": [49, 2, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "easy"}
{"question_id": 3019, "id": "sample_191", "function_name": "furthestDistanceFromOrigin", "code": "from collections import Counter\n\ndef furthestDistanceFromOrigin(moves: str) -> int:\n    ctr = Counter(moves)\n    return abs(ctr['L'] - ctr['R']) + ctr['_']", "input": "furthestDistanceFromOrigin(moves = '_______')", "output": "7", "numsteps": 602, "problem_id": [49, 10, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "easy"}
{"question_id": 3019, "id": "sample_192", "function_name": "furthestDistanceFromOrigin", "code": "def furthestDistanceFromOrigin(moves: str) -> int:\n    a, b, c = 0, 0, 0\n    a = moves.count('L')\n    b = moves.count('R')\n    c = moves.count('_')\n    return max([a + c - b, b + c - a])", "input": "furthestDistanceFromOrigin(moves = '_______')", "output": "7", "numsteps": 522, "problem_id": [49, 16, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "easy"}
{"question_id": 3019, "id": "sample_193", "function_name": "furthestDistanceFromOrigin", "code": "def furthestDistanceFromOrigin(moves: str) -> int:\n    ret = moves.count('_')\n    diff = abs(moves.count('L') - moves.count('R'))\n    return ret + diff", "input": "furthestDistanceFromOrigin(moves = 'L_RL__R')", "output": "3", "numsteps": 507, "problem_id": [49, 5, 0], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "easy"}
{"question_id": 3026, "id": "sample_194", "function_name": "minimumPossibleSum", "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans", "input": "minimumPossibleSum(n = 1, target = 1)", "output": "1", "numsteps": 528, "problem_id": [50, 6, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "medium"}
{"question_id": 3026, "id": "sample_195", "function_name": "minimumPossibleSum", "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target//2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)", "input": "minimumPossibleSum(n = 1, target = 1)", "output": "1", "numsteps": 538, "problem_id": [50, 8, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "medium"}
{"question_id": 3026, "id": "sample_196", "function_name": "minimumPossibleSum", "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2] :\n        return (1+n) * n // 2\n    if n - 1 + n < target : \n        return (1+n) * n // 2\n    \n    not_used = list(range(target//2+1, target))\n    l = n + len(not_used)\n    to_ret = (1+l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret", "input": "minimumPossibleSum(n = 2, target = 3)", "output": "4", "numsteps": 547, "problem_id": [50, 3, 0], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "medium"}
{"question_id": 3026, "id": "sample_197", "function_name": "minimumPossibleSum", "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)", "input": "minimumPossibleSum(n = 1, target = 1)", "output": "1", "numsteps": 504, "problem_id": [50, 16, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "medium"}
{"question_id": 3026, "id": "sample_198", "function_name": "minimumPossibleSum", "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    \n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    \n    return sum(arr)", "input": "minimumPossibleSum(n = 3, target = 3)", "output": "8", "numsteps": 568, "problem_id": [50, 4, 1], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "medium"}
{"question_id": 3026, "id": "sample_199", "function_name": "minimumPossibleSum", "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1,2*10**5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target-x)\n        if n == 0:\n            break\n    return curr_sum", "input": "minimumPossibleSum(n = 1, target = 1)", "output": "1", "numsteps": 534, "problem_id": [50, 15, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "medium"}
{"question_id": 3025, "id": "sample_200", "function_name": "minOperations", "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)", "input": "minOperations(nums = [1, 32, 1], target = 35)", "output": "-1", "numsteps": 512, "problem_id": [51, 0, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "hard"}
{"question_id": 3025, "id": "sample_201", "function_name": "minOperations", "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums)<target:return -1\n    cnt=[0]*32\n    for a in nums:\n        l=a.bit_length()-1\n        cnt[l]+=1\n    ans=0\n    for k in range(31):\n        if target>>k&1:\n            i=k\n            while cnt[i]==0:i+=1\n            while i>k:\n                cnt[i]-=1\n                cnt[i-1]+=2\n                ans+=1\n                i-=1\n            cnt[k]-=1\n        cnt[k+1]+=cnt[k]//2\n    return ans", "input": "minOperations(nums = [1, 32, 1], target = 35)", "output": "-1", "numsteps": 511, "problem_id": [51, 11, 2], "contest_id": "weekly-contest-360", "contest_date": "2023-08-27T00:00:00", "difficulty": "hard"}
{"question_id": 3046, "id": "sample_202", "function_name": "minimumOperations", "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0: continue\n        ans = min(ans, n - (j+3))\n    return ans", "input": "minimumOperations(num = '10')", "output": "1", "numsteps": 830, "problem_id": [54, 15, 2], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 3046, "id": "sample_203", "function_name": "minimumOperations", "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    \n    num = '00'+num\n    \n    ans = len(num)-2\n    n = len(num)\n    \n    for e in ends:\n        u, v = e[0], e[1]\n        \n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n        \n    return ans", "input": "minimumOperations(num = '10')", "output": "1", "numsteps": 854, "problem_id": [54, 12, 2], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 3046, "id": "sample_204", "function_name": "minimumOperations", "code": "def minimumOperations(s: str) -> int:\n    # 删空\n    ans = len(s)\n    # 留 1\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            # 00 25 50 75\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans", "input": "minimumOperations(s = '10')", "output": "1", "numsteps": 557, "problem_id": [54, 6, 2], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 3046, "id": "sample_205", "function_name": "minimumOperations", "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans", "input": "minimumOperations(num = '10')", "output": "1", "numsteps": 817, "problem_id": [54, 19, 2], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 3046, "id": "sample_206", "function_name": "minimumOperations", "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    \n    for i, c in enumerate(('00'+num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i-1", "input": "minimumOperations(num = '2908305')", "output": "3", "numsteps": 843, "problem_id": [54, 10, 1], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 3046, "id": "sample_207", "function_name": "minimumOperations", "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops", "input": "minimumOperations(num = '10')", "output": "1", "numsteps": 795, "problem_id": [54, 2, 2], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 2915, "id": "sample_208", "function_name": "countInterestingSubarrays", "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans", "input": "countInterestingSubarrays(nums = [3, 1, 9, 6], modulo = 3, k = 0)", "output": "2", "numsteps": 743, "problem_id": [55, 9, 1], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 2915, "id": "sample_209", "function_name": "countInterestingSubarrays", "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo == k\n        s %= modulo\n        ans += cnt[(s-k)%modulo]\n        cnt[s] += 1\n    return ans", "input": "countInterestingSubarrays(nums = [3, 1, 9, 6], modulo = 3, k = 0)", "output": "2", "numsteps": 771, "problem_id": [55, 0, 1], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 2915, "id": "sample_210", "function_name": "countInterestingSubarrays", "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if (nums[i] % m) == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    # (s - x + m) % m = k\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res", "input": "countInterestingSubarrays(nums = [3, 2, 4], m = 2, k = 1)", "output": "3", "numsteps": 749, "problem_id": [55, 3, 0], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 2915, "id": "sample_211", "function_name": "countInterestingSubarrays", "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0]=1\n    ans = 0\n    for c in nums:\n        if c%modulo==k:\n            s+=1\n            s%=modulo\n        ns = s-k\n        if ns<0:\n            ns+=modulo\n        if ns in cnt:\n            ans+=cnt[ns]\n        if s not in cnt:\n            cnt[s]=0\n        cnt[s]+=1\n    return ans", "input": "countInterestingSubarrays(nums = [3, 1, 9, 6], modulo = 3, k = 0)", "output": "2", "numsteps": 739, "problem_id": [55, 4, 1], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 2915, "id": "sample_212", "function_name": "countInterestingSubarrays", "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    \n    for i in range(1, n + 1):\n        a[i] += a[i - 1] \n        \n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans", "input": "countInterestingSubarrays(nums = [3, 1, 9, 6], m = 3, k = 0)", "output": "2", "numsteps": 913, "problem_id": [55, 13, 1], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 2915, "id": "sample_213", "function_name": "countInterestingSubarrays", "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m==k:\n            cnt+=1\n        ans+=c[(cnt-k)%m]\n\n        \n        c[cnt%m]+=1\n\n        \n            # last=i\n        \n        \n    return ans", "input": "countInterestingSubarrays(nums = [3, 2, 4], m = 2, k = 1)", "output": "3", "numsteps": 688, "problem_id": [55, 22, 0], "contest_id": "weekly-contest-361", "contest_date": "2023-09-03T00:00:00", "difficulty": "medium"}
{"question_id": 3034, "id": "sample_214", "function_name": "numberOfPoints", "code": "def numberOfPoints(nums: List[List[int]]) -> int:\n    mark = [0] * 200\n    for s,t in nums:\n        for i in range(s, t+1):\n            mark[i] = 1\n    return sum(mark)", "input": "numberOfPoints(nums = [[3, 6], [1, 5], [4, 7]])", "output": "7", "numsteps": 710, "problem_id": [56, 17, 0], "contest_id": "weekly-contest-362", "contest_date": "2023-09-10T00:00:00", "difficulty": "easy"}
{"question_id": 3034, "id": "sample_215", "function_name": "numberOfPoints", "code": "def numberOfPoints(nums: List[List[int]]) -> int:\n    cnt = [0] * (101)\n    for l,r in nums:\n        for j in range(l, r + 1):\n            cnt[j] = 1\n    return sum(cnt)", "input": "numberOfPoints(nums = [[1, 3], [5, 8]])", "output": "7", "numsteps": 638, "problem_id": [56, 7, 1], "contest_id": "weekly-contest-362", "contest_date": "2023-09-10T00:00:00", "difficulty": "easy"}
{"question_id": 3034, "id": "sample_216", "function_name": "numberOfPoints", "code": "def numberOfPoints(nums: List[List[int]]) -> int:\n    s = set()\n    for l, r in nums:\n        s |= set(range(l, r + 1))\n        \n    return (len(s))", "input": "numberOfPoints(nums = [[3, 6], [1, 5], [4, 7]])", "output": "7", "numsteps": 600, "problem_id": [56, 0, 0], "contest_id": "weekly-contest-362", "contest_date": "2023-09-10T00:00:00", "difficulty": "easy"}
{"question_id": 3034, "id": "sample_217", "function_name": "numberOfPoints", "code": "def numberOfPoints(nums: List[List[int]]) -> int:\n    dp=[0]*105\n    for l,r in nums:\n        for i in range(l,r+1):dp[i]=1\n    return sum(dp)", "input": "numberOfPoints(nums = [[1, 3], [5, 8]])", "output": "7", "numsteps": 631, "problem_id": [56, 14, 1], "contest_id": "weekly-contest-362", "contest_date": "2023-09-10T00:00:00", "difficulty": "easy"}
{"question_id": 3034, "id": "sample_218", "function_name": "numberOfPoints", "code": "def numberOfPoints(nums: List[List[int]]) -> int:\n    c = set()\n    for start, end in nums:\n        for i in range(start, end + 1):\n            c.add(i)\n    return len(c)", "input": "numberOfPoints(nums = [[1, 3], [5, 8]])", "output": "7", "numsteps": 643, "problem_id": [56, 8, 1], "contest_id": "weekly-contest-362", "contest_date": "2023-09-10T00:00:00", "difficulty": "easy"}
{"question_id": 3034, "id": "sample_219", "function_name": "numberOfPoints", "code": "def numberOfPoints(nums: List[List[int]]) -> int:\n    s = set()\n    for u, v in nums:\n        for i in range(u, v + 1):\n            s.add(i)\n    return len(s)", "input": "numberOfPoints(nums = [[3, 6], [1, 5], [4, 7]])", "output": "7", "numsteps": 721, "problem_id": [56, 11, 0], "contest_id": "weekly-contest-362", "contest_date": "2023-09-10T00:00:00", "difficulty": "easy"}
{"question_id": 3093, "id": "sample_220", "function_name": "sumIndicesWithKSetBits", "code": "def sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    s = 0\n    for i, v in enumerate(nums):\n        if bin(i).count('1') == k: s += v\n    return s", "input": "sumIndicesWithKSetBits(nums = [4, 3, 2, 1], k = 2)", "output": "1", "numsteps": 579, "problem_id": [58, 9, 1], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "easy"}
{"question_id": 3093, "id": "sample_221", "function_name": "sumIndicesWithKSetBits", "code": "def sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    ret = 0\n    for i, x in enumerate(nums):\n        if bin(i).count('1') == k:\n            ret += x\n    return ret", "input": "sumIndicesWithKSetBits(nums = [5, 10, 1, 5, 2], k = 1)", "output": "13", "numsteps": 607, "problem_id": [58, 12, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "easy"}
{"question_id": 3093, "id": "sample_222", "function_name": "sumIndicesWithKSetBits", "code": "def sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    return sum(nums[i] for i in range(len(nums)) if bin(i).count('1') == k)", "input": "sumIndicesWithKSetBits(nums = [5, 10, 1, 5, 2], k = 1)", "output": "13", "numsteps": 610, "problem_id": [58, 15, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "easy"}
{"question_id": 3093, "id": "sample_223", "function_name": "sumIndicesWithKSetBits", "code": "def sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    return sum(x for i, x in enumerate(nums) if bin(i).count('1') == k)", "input": "sumIndicesWithKSetBits(nums = [5, 10, 1, 5, 2], k = 1)", "output": "13", "numsteps": 611, "problem_id": [58, 7, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "easy"}
{"question_id": 3093, "id": "sample_224", "function_name": "sumIndicesWithKSetBits", "code": "def sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    r = 0\n    for i, n in enumerate(nums):\n        s = bin(i)[2:]\n        if s.count('1') == k:\n            r += n\n    return r", "input": "sumIndicesWithKSetBits(nums = [5, 10, 1, 5, 2], k = 1)", "output": "13", "numsteps": 642, "problem_id": [58, 4, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "easy"}
{"question_id": 3093, "id": "sample_225", "function_name": "sumIndicesWithKSetBits", "code": "def sumIndicesWithKSetBits(nums: List[int], k: int) -> int:\n    ans = 0\n    n = len(nums)\n    for i in  range(n):\n        if bin(i).count(\"1\") == k:\n            ans += nums[i]\n    return ans", "input": "sumIndicesWithKSetBits(nums = [5, 10, 1, 5, 2], k = 1)", "output": "13", "numsteps": 608, "problem_id": [58, 5, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "easy"}
{"question_id": 3104, "id": "sample_226", "function_name": "countWays", "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n+1):\n        l = (g == 0) or g > nums[g-1]\n        r = (g == n) or g < nums[g]\n        c += l and r\n    return int(c)", "input": "countWays(nums = [6, 0, 3, 3, 6, 7, 2, 7])", "output": "3", "numsteps": 824, "problem_id": [59, 11, 1], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "medium"}
{"question_id": 3104, "id": "sample_227", "function_name": "countWays", "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-0x3f3f3f3f)\n    nums.append(0x3f3f3f3f)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans", "input": "countWays(nums = [6, 0, 3, 3, 6, 7, 2, 7])", "output": "3", "numsteps": 673, "problem_id": [59, 7, 1], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "medium"}
{"question_id": 3104, "id": "sample_228", "function_name": "countWays", "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    \n    res = 1  # select all\n    \n    if nums.count(0) == 0:  # select none\n        res += 1\n    \n    for i,(x,y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            # print(x,i,y)\n            res += 1\n            \n    # print()\n    \n    return res", "input": "countWays(nums = [6, 0, 3, 3, 6, 7, 2, 7])", "output": "3", "numsteps": 662, "problem_id": [59, 16, 1], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "medium"}
{"question_id": 3104, "id": "sample_229", "function_name": "countWays", "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i-1] >= i: continue\n        if i < n and nums[i] <= i: continue\n        ans += 1\n    return ans", "input": "countWays(nums = [6, 0, 3, 3, 6, 7, 2, 7])", "output": "3", "numsteps": 704, "problem_id": [59, 0, 1], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "medium"}
{"question_id": 3104, "id": "sample_230", "function_name": "countWays", "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    # 都选\n    ans += n > nums[0]\n    \n    # 都不选\n    ans += 0 < nums[-1]\n    \n    for i in range(n - 1):\n        # 前面都不选，后面都选\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    \n    return ans", "input": "countWays(nums = [1, 1])", "output": "2", "numsteps": 565, "problem_id": [59, 15, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "medium"}
{"question_id": 3104, "id": "sample_231", "function_name": "countWays", "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i-1] < i and nums[i] > i:\n            ans += 1\n    return ans", "input": "countWays(nums = [1, 1])", "output": "2", "numsteps": 544, "problem_id": [59, 4, 0], "contest_id": "weekly-contest-363", "contest_date": "2023-09-17T00:00:00", "difficulty": "medium"}
{"question_id": 3055, "id": "sample_232", "function_name": "maximumOddBinaryNumber", "code": "def maximumOddBinaryNumber(s: str) -> str:\n    a = s.count('1')\n    b = s.count('0')\n    \n    res = '1'*(a-1) + '0'*(b) + '1'\n    return res", "input": "maximumOddBinaryNumber(s = '010')", "output": "'001'", "numsteps": 511, "problem_id": [61, 8, 0], "contest_id": "weekly-contest-364", "contest_date": "2023-09-24T00:00:00", "difficulty": "easy"}
{"question_id": 3055, "id": "sample_233", "function_name": "maximumOddBinaryNumber", "code": "def maximumOddBinaryNumber(s: str) -> str:\n    c = 0\n    for x in s:\n        if x == '1':\n            c += 1\n    n = len(s)\n    return (c-1)*'1'+(n-c)*'0'+'1'", "input": "maximumOddBinaryNumber(s = '010')", "output": "'001'", "numsteps": 540, "problem_id": [61, 9, 0], "contest_id": "weekly-contest-364", "contest_date": "2023-09-24T00:00:00", "difficulty": "easy"}
{"question_id": 3055, "id": "sample_234", "function_name": "maximumOddBinaryNumber", "code": "def maximumOddBinaryNumber(s: str) -> str:\n    n = len(s)\n    num_1s = s.count('1')\n    st = '1' * (num_1s - 1)\n    st += '0' * (n - num_1s)\n    st += '1'\n    return st", "input": "maximumOddBinaryNumber(s = '0101')", "output": "'1001'", "numsteps": 518, "problem_id": [61, 11, 1], "contest_id": "weekly-contest-364", "contest_date": "2023-09-24T00:00:00", "difficulty": "easy"}
{"question_id": 3055, "id": "sample_235", "function_name": "maximumOddBinaryNumber", "code": "def maximumOddBinaryNumber(s: str) -> str:\n    return '1' * (s.count('1') - 1) + '0' * s.count('0') + '1'", "input": "maximumOddBinaryNumber(s = '010')", "output": "'001'", "numsteps": 502, "problem_id": [61, 3, 0], "contest_id": "weekly-contest-364", "contest_date": "2023-09-24T00:00:00", "difficulty": "easy"}
{"question_id": 3055, "id": "sample_236", "function_name": "maximumOddBinaryNumber", "code": "def maximumOddBinaryNumber(s: str) -> str:\n    o = -1\n    m = 0\n    for c in s:\n        if c == '1':\n            o += 1\n        else:\n            m += 1\n    \n    return '1' * o + '0' * m + '1'", "input": "maximumOddBinaryNumber(s = '010')", "output": "'001'", "numsteps": 546, "problem_id": [61, 2, 0], "contest_id": "weekly-contest-364", "contest_date": "2023-09-24T00:00:00", "difficulty": "easy"}
{"question_id": 3055, "id": "sample_237", "function_name": "maximumOddBinaryNumber", "code": "def maximumOddBinaryNumber(s: str) -> str:\n    o = s.count('1')\n    z = len(s)-o\n    return '1'*(o-1)+'0'*z+'1'", "input": "maximumOddBinaryNumber(s = '010')", "output": "'001'", "numsteps": 509, "problem_id": [61, 15, 0], "contest_id": "weekly-contest-364", "contest_date": "2023-09-24T00:00:00", "difficulty": "easy"}
{"question_id": 3154, "id": "sample_238", "function_name": "maximumTripletValue", "code": "def maximumTripletValue(nums: List[int]) -> int:\n    n =len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                ans = max(ans, (nums[i] - nums[j]) * nums[k])\n\n    return ans", "input": "maximumTripletValue(nums = [1, 2, 3])", "output": "0", "numsteps": 615, "problem_id": [63, 8, 2], "contest_id": "weekly-contest-365", "contest_date": "2023-10-01T00:00:00", "difficulty": "easy"}
{"question_id": 3154, "id": "sample_239", "function_name": "maximumTripletValue", "code": "def maximumTripletValue(nums: List[int]) -> int:\n    ans = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                ans = max(ans, (nums[i] - nums[j]) * nums[k])\n    return ans", "input": "maximumTripletValue(nums = [1, 2, 3])", "output": "0", "numsteps": 615, "problem_id": [63, 3, 2], "contest_id": "weekly-contest-365", "contest_date": "2023-10-01T00:00:00", "difficulty": "easy"}
{"question_id": 3154, "id": "sample_240", "function_name": "maximumTripletValue", "code": "def maximumTripletValue(nums: List[int]) -> int:\n  maxNum = max(nums[0], nums[1])\n  maxDiff = nums[0] - nums[1]\n  maxTriplet = 0\n  \n  for num in islice(nums, 2, len(nums)):\n    maxTriplet = max(maxTriplet, maxDiff * num)\n    \n    maxDiff = max(maxDiff, maxNum - num)\n    \n    maxNum = max(maxNum, num)\n  \n  return maxTriplet", "input": "maximumTripletValue(nums = [1, 2, 3])", "output": "0", "numsteps": 561, "problem_id": [63, 9, 2], "contest_id": "weekly-contest-365", "contest_date": "2023-10-01T00:00:00", "difficulty": "easy"}
{"question_id": 3154, "id": "sample_241", "function_name": "maximumTripletValue", "code": "def maximumTripletValue(nums: List[int]) -> int:\n    ans = 0\n    x = 0 # max(ai - aj)\n    mx = 0\n    for y in nums:\n        ans = max(ans, x * y)\n        x = max(x, mx - y)\n        mx = max(mx, y)\n    return ans", "input": "maximumTripletValue(nums = [1, 2, 3])", "output": "0", "numsteps": 594, "problem_id": [63, 6, 2], "contest_id": "weekly-contest-365", "contest_date": "2023-10-01T00:00:00", "difficulty": "easy"}
{"question_id": 3154, "id": "sample_242", "function_name": "maximumTripletValue", "code": "def maximumTripletValue(nums: List[int]) -> int:\n    maxres = 0\n    for i,x in enumerate(nums):\n        for j,y in enumerate(nums[i+1:], start=i+1):\n            for k,z in enumerate(nums[j+1:], start=j+1):\n                val = (nums[i] - nums[j]) * nums[k]\n                maxres = max(maxres, val)\n    return maxres", "input": "maximumTripletValue(nums = [1, 2, 3])", "output": "0", "numsteps": 669, "problem_id": [63, 13, 2], "contest_id": "weekly-contest-365", "contest_date": "2023-10-01T00:00:00", "difficulty": "easy"}
{"question_id": 3154, "id": "sample_243", "function_name": "maximumTripletValue", "code": "def maximumTripletValue(nums: List[int]) -> int:\n    res = 0\n    m = max(nums[0], nums[1])\n    c = max(0, nums[0] - nums[1])\n    for i in range(2, len(nums)):\n        res = max(res, nums[i] * c)\n        c = max(c, m - nums[i])\n        m = max(m, nums[i])\n    return res", "input": "maximumTripletValue(nums = [1, 2, 3])", "output": "0", "numsteps": 569, "problem_id": [63, 2, 2], "contest_id": "weekly-contest-365", "contest_date": "2023-10-01T00:00:00", "difficulty": "easy"}
{"question_id": 3172, "id": "sample_244", "function_name": "differenceOfSums", "code": "def differenceOfSums(n: int, m: int) -> int:\n    return sum(x for x in range(1, n + 1) if x % m) - sum(x for x in range(1, n + 1) if x % m == 0)", "input": "differenceOfSums(n = 5, m = 1)", "output": "-15", "numsteps": 642, "problem_id": [65, 10, 2], "contest_id": "weekly-contest-366", "contest_date": "2023-10-08T00:00:00", "difficulty": "easy"}
{"question_id": 3172, "id": "sample_245", "function_name": "differenceOfSums", "code": "def differenceOfSums(n: int, m: int) -> int:\n    return sum(i for i in range(1, n + 1) if i % m != 0) - sum(i for i in range(1, n + 1) if i % m == 0)", "input": "differenceOfSums(n = 5, m = 1)", "output": "-15", "numsteps": 652, "problem_id": [65, 15, 2], "contest_id": "weekly-contest-366", "contest_date": "2023-10-08T00:00:00", "difficulty": "easy"}
{"question_id": 3172, "id": "sample_246", "function_name": "differenceOfSums", "code": "def differenceOfSums(n: int, m: int) -> int:\n    return sum(i for i in range(1, n+1) if i % m != 0) - sum(i for i in range(1, n+1) if i % m == 0)", "input": "differenceOfSums(n = 5, m = 1)", "output": "-15", "numsteps": 652, "problem_id": [65, 2, 2], "contest_id": "weekly-contest-366", "contest_date": "2023-10-08T00:00:00", "difficulty": "easy"}
{"question_id": 3033, "id": "sample_247", "function_name": "minOperations", "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1", "input": "minOperations(s1 = '10110', s2 = '00011', x = 4)", "output": "-1", "numsteps": 587, "problem_id": [67, 2, 1], "contest_id": "weekly-contest-366", "contest_date": "2023-10-08T00:00:00", "difficulty": "medium"}
{"question_id": 3033, "id": "sample_248", "function_name": "minOperations", "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2", "input": "minOperations(s1 = '10110', s2 = '00011', x = 4)", "output": "-1", "numsteps": 505, "problem_id": [67, 10, 1], "contest_id": "weekly-contest-366", "contest_date": "2023-10-08T00:00:00", "difficulty": "medium"}
{"question_id": 3150, "id": "sample_249", "function_name": "shortestBeautifulSubstring", "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans", "input": "shortestBeautifulSubstring(s = '1011', k = 2)", "output": "'11'", "numsteps": 802, "problem_id": [69, 14, 1], "contest_id": "weekly-contest-367", "contest_date": "2023-10-15T00:00:00", "difficulty": "medium"}
{"question_id": 3150, "id": "sample_250", "function_name": "shortestBeautifulSubstring", "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''", "input": "shortestBeautifulSubstring(s = '1011', k = 2)", "output": "'11'", "numsteps": 837, "problem_id": [69, 5, 1], "contest_id": "weekly-contest-367", "contest_date": "2023-10-15T00:00:00", "difficulty": "medium"}
{"question_id": 3150, "id": "sample_251", "function_name": "shortestBeautifulSubstring", "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans", "input": "shortestBeautifulSubstring(s = '1011', k = 2)", "output": "'11'", "numsteps": 799, "problem_id": [69, 2, 1], "contest_id": "weekly-contest-367", "contest_date": "2023-10-15T00:00:00", "difficulty": "medium"}
{"question_id": 3150, "id": "sample_252", "function_name": "shortestBeautifulSubstring", "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty", "input": "shortestBeautifulSubstring(s = '1011', k = 2)", "output": "'11'", "numsteps": 682, "problem_id": [69, 16, 1], "contest_id": "weekly-contest-367", "contest_date": "2023-10-15T00:00:00", "difficulty": "medium"}
{"question_id": 3150, "id": "sample_253", "function_name": "shortestBeautifulSubstring", "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]", "input": "shortestBeautifulSubstring(s = '1011', k = 2)", "output": "'11'", "numsteps": 791, "problem_id": [69, 8, 1], "contest_id": "weekly-contest-367", "contest_date": "2023-10-15T00:00:00", "difficulty": "medium"}
{"question_id": 3150, "id": "sample_254", "function_name": "shortestBeautifulSubstring", "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]", "input": "shortestBeautifulSubstring(s = '000', k = 1)", "output": "''", "numsteps": 539, "problem_id": [69, 3, 2], "contest_id": "weekly-contest-367", "contest_date": "2023-10-15T00:00:00", "difficulty": "medium"}
{"question_id": 3176, "id": "sample_255", "function_name": "minimumSum", "code": "def minimumSum(nums: List[int]) -> int:\n    n = len(nums)\n    ans = math.inf\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if nums[i] < nums[j] and nums[k] < nums[j]:\n                    ans = min(ans,nums[i]+nums[j]+nums[k])\n    return ans if ans!=math.inf else -1", "input": "minimumSum(nums = [8, 6, 1, 5, 3])", "output": "9", "numsteps": 863, "problem_id": [71, 6, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "easy"}
{"question_id": 3176, "id": "sample_256", "function_name": "minimumSum", "code": "def minimumSum(nums: List[int]) -> int:\n    p = list(accumulate(nums, min))\n    s = list(accumulate(nums[::-1], min))[::-1]\n    m = inf\n    for i in range(1, len(nums)-1):\n        if p[i-1] < nums[i] and s[i+1] < nums[i]:\n            m = min(m, p[i-1] + nums[i] + s[i+1])\n    return -1 if m == inf else m", "input": "minimumSum(nums = [8, 6, 1, 5, 3])", "output": "9", "numsteps": 620, "problem_id": [71, 5, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "easy"}
{"question_id": 3176, "id": "sample_257", "function_name": "minimumSum", "code": "def minimumSum(nums: List[int]) -> int:\n    left, right, ans = [inf], [inf], inf\n    for num in nums:\n        left.append(min(left[-1], num))\n    for num in nums[::-1]:\n        right.append(min(right[-1], num))\n    right.reverse()\n    for i, num in enumerate(nums):\n        if left[i] < num and right[i + 1] < num:\n            ans = min(ans, num + left[i] + right[i + 1])\n    return ans if ans < inf else -1", "input": "minimumSum(nums = [6, 5, 4, 3, 4, 5])", "output": "-1", "numsteps": 810, "problem_id": [71, 13, 2], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "easy"}
{"question_id": 3176, "id": "sample_258", "function_name": "minimumSum", "code": "def minimumSum(nums: List[int]) -> int:\n    n = len(nums)\n    ans = inf\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if nums[j] > max(nums[i], nums[k]):\n                    ans = min(ans, nums[i] + nums[j] + nums[k])\n    return ans if ans < inf else -1", "input": "minimumSum(nums = [8, 6, 1, 5, 3])", "output": "9", "numsteps": 903, "problem_id": [71, 1, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "easy"}
{"question_id": 3176, "id": "sample_259", "function_name": "minimumSum", "code": "def minimumSum(nums: List[int]) -> int:\n    \n    n = len(nums)\n    A = deque()\n    rmin = math.inf\n    for i in range(n-1,-1,-1):\n        A.appendleft(rmin)\n        rmin = min(rmin,nums[i])\n    lmin = nums[0]\n    ans = math.inf\n    for i in range(1,n-1):\n        if lmin < nums[i] > A[i]:\n            ans = min(ans, lmin + nums[i] + A[i])\n        lmin = min(lmin, nums[i])\n    return ans if ans < math.inf else -1", "input": "minimumSum(nums = [6, 5, 4, 3, 4, 5])", "output": "-1", "numsteps": 752, "problem_id": [71, 9, 2], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "easy"}
{"question_id": 3176, "id": "sample_260", "function_name": "minimumSum", "code": "def minimumSum(nums: list[int]) -> int:\n    n = len(nums)\n    ans = inf\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] < nums[j] and nums[j] > nums[k]:\n                    ans = min(ans, nums[i] + nums[j] + nums[k])\n    return ans if ans != inf else -1", "input": "minimumSum(nums = [8, 6, 1, 5, 3])", "output": "9", "numsteps": 848, "problem_id": [71, 14, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "easy"}
{"question_id": 3166, "id": "sample_261", "function_name": "minGroupsForValidAssignment", "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans", "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])", "output": "2", "numsteps": 959, "problem_id": [72, 1, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "medium"}
{"question_id": 3166, "id": "sample_262", "function_name": "minGroupsForValidAssignment", "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])", "input": "minGroupsForValidAssignment(nums = [10, 10, 10, 3, 1, 1])", "output": "4", "numsteps": 802, "problem_id": [72, 6, 1], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "medium"}
{"question_id": 3166, "id": "sample_263", "function_name": "minGroupsForValidAssignment", "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)", "input": "minGroupsForValidAssignment(nums = [10, 10, 10, 3, 1, 1])", "output": "4", "numsteps": 740, "problem_id": [72, 4, 1], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "medium"}
{"question_id": 3166, "id": "sample_264", "function_name": "minGroupsForValidAssignment", "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m", "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])", "output": "2", "numsteps": 723, "problem_id": [72, 5, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "medium"}
{"question_id": 3166, "id": "sample_265", "function_name": "minGroupsForValidAssignment", "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1", "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])", "output": "2", "numsteps": 881, "problem_id": [72, 9, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "medium"}
{"question_id": 3166, "id": "sample_266", "function_name": "minGroupsForValidAssignment", "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res", "input": "minGroupsForValidAssignment(nums = [3, 2, 3, 2, 3])", "output": "2", "numsteps": 668, "problem_id": [72, 13, 0], "contest_id": "weekly-contest-368", "contest_date": "2023-10-22T00:00:00", "difficulty": "medium"}
{"question_id": 3171, "id": "sample_267", "function_name": "minSum", "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)", "input": "minSum(nums1 = [2, 0, 2, 0], nums2 = [1, 4])", "output": "-1", "numsteps": 673, "problem_id": [75, 7, 1], "contest_id": "weekly-contest-369", "contest_date": "2023-10-29T00:00:00", "difficulty": "medium"}
{"question_id": 3171, "id": "sample_268", "function_name": "minSum", "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))", "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])", "output": "12", "numsteps": 563, "problem_id": [75, 1, 0], "contest_id": "weekly-contest-369", "contest_date": "2023-10-29T00:00:00", "difficulty": "medium"}
{"question_id": 3171, "id": "sample_269", "function_name": "minSum", "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)", "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])", "output": "12", "numsteps": 569, "problem_id": [75, 5, 0], "contest_id": "weekly-contest-369", "contest_date": "2023-10-29T00:00:00", "difficulty": "medium"}
{"question_id": 3171, "id": "sample_270", "function_name": "minSum", "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)", "input": "minSum(nums1 = [2, 0, 2, 0], nums2 = [1, 4])", "output": "-1", "numsteps": 637, "problem_id": [75, 10, 1], "contest_id": "weekly-contest-369", "contest_date": "2023-10-29T00:00:00", "difficulty": "medium"}
{"question_id": 3171, "id": "sample_271", "function_name": "minSum", "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)", "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])", "output": "12", "numsteps": 651, "problem_id": [75, 15, 0], "contest_id": "weekly-contest-369", "contest_date": "2023-10-29T00:00:00", "difficulty": "medium"}
{"question_id": 3171, "id": "sample_272", "function_name": "minSum", "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)", "input": "minSum(nums1 = [3, 2, 0, 1, 0], nums2 = [6, 5, 0])", "output": "12", "numsteps": 677, "problem_id": [75, 13, 0], "contest_id": "weekly-contest-369", "contest_date": "2023-10-29T00:00:00", "difficulty": "medium"}
{"question_id": 3188, "id": "sample_273", "function_name": "findChampion", "code": "def findChampion(grid: List[List[int]]) -> int:\n  n = len(grid)\n  for j in range(n):\n    if all(grid[i][j] == 0 for i in range(n)):\n      return j", "input": "findChampion(grid = [[0, 1], [0, 0]])", "output": "0", "numsteps": 599, "problem_id": [76, 13, 0], "contest_id": "weekly-contest-370", "contest_date": "2023-11-05T00:00:00", "difficulty": "easy"}
{"question_id": 3188, "id": "sample_274", "function_name": "findChampion", "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        curr = sum(grid[x][i] for x in range(n))\n        if curr == 0:\n            return i\n    return -1", "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])", "output": "1", "numsteps": 685, "problem_id": [76, 15, 1], "contest_id": "weekly-contest-370", "contest_date": "2023-11-05T00:00:00", "difficulty": "easy"}
{"question_id": 3188, "id": "sample_275", "function_name": "findChampion", "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n\n    def is_champ(i):\n        for j in range(n):\n            if j == i:\n                continue\n            if grid[i][j] == 0:\n                return False\n        return True\n\n    for i in range(n):\n        if is_champ(i):\n            return i\n    return -1", "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])", "output": "1", "numsteps": 663, "problem_id": [76, 7, 1], "contest_id": "weekly-contest-370", "contest_date": "2023-11-05T00:00:00", "difficulty": "easy"}
{"question_id": 3188, "id": "sample_276", "function_name": "findChampion", "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i, row in enumerate(grid):\n        if sum(row[j] for j in range(n) if j != i) == n - 1:\n            return i\n    return -1", "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])", "output": "1", "numsteps": 683, "problem_id": [76, 14, 1], "contest_id": "weekly-contest-370", "contest_date": "2023-11-05T00:00:00", "difficulty": "easy"}
{"question_id": 3188, "id": "sample_277", "function_name": "findChampion", "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        ct = 0\n        for j in range(n):\n            ct += grid[j][i]\n        if ct == 0:\n            return i", "input": "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]])", "output": "1", "numsteps": 659, "problem_id": [76, 1, 1], "contest_id": "weekly-contest-370", "contest_date": "2023-11-05T00:00:00", "difficulty": "easy"}
{"question_id": 3188, "id": "sample_278", "function_name": "findChampion", "code": "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        t = 0\n        for j in range(n):\n            t += grid[i][j]\n        if t == n - 1:\n            return i", "input": "findChampion(grid = [[0, 1], [0, 0]])", "output": "0", "numsteps": 589, "problem_id": [76, 12, 0], "contest_id": "weekly-contest-370", "contest_date": "2023-11-05T00:00:00", "difficulty": "easy"}
{"question_id": 3190, "id": "sample_279", "function_name": "minOperations", "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))", "input": "minOperations(nums1 = [1, 2, 7], nums2 = [4, 5, 3])", "output": "1", "numsteps": 711, "problem_id": [79, 17, 0], "contest_id": "weekly-contest-371", "contest_date": "2023-11-12T00:00:00", "difficulty": "medium"}
{"question_id": 3190, "id": "sample_280", "function_name": "minOperations", "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1", "input": "minOperations(nums1 = [1, 2, 7], nums2 = [4, 5, 3])", "output": "1", "numsteps": 949, "problem_id": [79, 3, 0], "contest_id": "weekly-contest-371", "contest_date": "2023-11-12T00:00:00", "difficulty": "medium"}
{"question_id": 3190, "id": "sample_281", "function_name": "minOperations", "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans", "input": "minOperations(a = [1, 2, 7], b = [4, 5, 3])", "output": "1", "numsteps": 911, "problem_id": [79, 4, 0], "contest_id": "weekly-contest-371", "contest_date": "2023-11-12T00:00:00", "difficulty": "medium"}
{"question_id": 3190, "id": "sample_282", "function_name": "minOperations", "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans", "input": "minOperations(nums1 = [1, 2, 7], nums2 = [4, 5, 3])", "output": "1", "numsteps": 711, "problem_id": [79, 14, 0], "contest_id": "weekly-contest-371", "contest_date": "2023-11-12T00:00:00", "difficulty": "medium"}
{"question_id": 3207, "id": "sample_283", "function_name": "findMinimumOperations", "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    l = min(len(s1), len(s2), len(s3))\n    for i in range(l, 0, -1):\n        if s1[:i] == s2[:i] and s2[:i] == s3[:i]:\n            return len(s1) - i + len(s2) - i + len(s3) - i\n        \n    return -1", "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')", "output": "-1", "numsteps": 559, "problem_id": [80, 8, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "easy"}
{"question_id": 3207, "id": "sample_284", "function_name": "findMinimumOperations", "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    ans = len(s1 + s2 + s3)\n    for i in range(len(s1), 0, -1):\n        if s1[:i] == s2[:i] == s3[:i]:\n            return ans - i * 3\n    return -1", "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')", "output": "-1", "numsteps": 569, "problem_id": [80, 7, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "easy"}
{"question_id": 3207, "id": "sample_285", "function_name": "findMinimumOperations", "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    n = len(s1)\n    m = len(s2)\n    k = len(s3)\n    ans = inf\n    for i in range(1, n+1):\n        if s1[:i] == s2[:i] == s3[:i]:\n            x1 = n-i\n            x2 = m-i\n            x3 = k-i\n            cur = x1+x2+x3\n            if cur < ans:\n                ans = cur\n    return ans if ans < inf else -1", "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')", "output": "-1", "numsteps": 581, "problem_id": [80, 0, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "easy"}
{"question_id": 3207, "id": "sample_286", "function_name": "findMinimumOperations", "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    if len(set([s1[0], s2[0], s3[0]])) != 1:\n        return -1\n    ans = 0\n    for i in range(min(len(s1), len(s2), len(s3))):\n        if s1[i]==s2[i]==s3[i]:\n            ans += 1\n        else:\n            break\n    return len(s1)+len(s2)+len(s3)-ans*3", "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')", "output": "-1", "numsteps": 508, "problem_id": [80, 3, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "easy"}
{"question_id": 3207, "id": "sample_287", "function_name": "findMinimumOperations", "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    if s1 == s2 == s3:\n        return 0\n    for i in range(min(len(s1), len(s2), len(s3))):\n        if s1[i] != s2[i] or s1[i] != s3[i]:\n            break\n    else:\n        i += 1\n    if i < 1:\n        return -1\n    else:\n        return len(s1) - i + (len(s2) - i) + (len(s3) - i)", "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')", "output": "-1", "numsteps": 533, "problem_id": [80, 9, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "easy"}
{"question_id": 3207, "id": "sample_288", "function_name": "findMinimumOperations", "code": "def findMinimumOperations(s1: str, s2: str, s3: str) -> int:\n    for n in range(min(min(len(s1),len(s2)),len(s3)),0,-1):\n        if s1[:n] == s2[:n] and s1[:n] == s3[:n]:\n            return len(s1)+len(s2)+len(s3)-n*3\n    return -1", "input": "findMinimumOperations(s1 = 'dac', s2 = 'bac', s3 = 'cac')", "output": "-1", "numsteps": 558, "problem_id": [80, 12, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "easy"}
{"question_id": 3195, "id": "sample_289", "function_name": "minimumSteps", "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret", "input": "minimumSteps(s = '0111')", "output": "0", "numsteps": 587, "problem_id": [81, 8, 2], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "medium"}
{"question_id": 3195, "id": "sample_290", "function_name": "minimumSteps", "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans", "input": "minimumSteps(s = '0111')", "output": "0", "numsteps": 570, "problem_id": [81, 3, 2], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "medium"}
{"question_id": 3195, "id": "sample_291", "function_name": "minimumSteps", "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res", "input": "minimumSteps(s = '0111')", "output": "0", "numsteps": 552, "problem_id": [81, 11, 2], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "medium"}
{"question_id": 3195, "id": "sample_292", "function_name": "minimumSteps", "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans", "input": "minimumSteps(s = '100')", "output": "2", "numsteps": 537, "problem_id": [81, 7, 1], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "medium"}
{"question_id": 3195, "id": "sample_293", "function_name": "minimumSteps", "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2", "input": "minimumSteps(s = '101')", "output": "1", "numsteps": 553, "problem_id": [81, 10, 0], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "medium"}
{"question_id": 3195, "id": "sample_294", "function_name": "minimumSteps", "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re", "input": "minimumSteps(s = '101')", "output": "1", "numsteps": 536, "problem_id": [81, 16, 0], "contest_id": "weekly-contest-372", "contest_date": "2023-11-18T00:00:00", "difficulty": "medium"}
{"question_id": 3210, "id": "sample_295", "function_name": "beautifulSubstrings", "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans", "input": "beautifulSubstrings(s = 'abba', k = 1)", "output": "3", "numsteps": 912, "problem_id": [83, 5, 1], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3210, "id": "sample_296", "function_name": "beautifulSubstrings", "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans", "input": "beautifulSubstrings(s = 'bcdf', k = 1)", "output": "0", "numsteps": 825, "problem_id": [83, 4, 2], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3210, "id": "sample_297", "function_name": "beautifulSubstrings", "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res", "input": "beautifulSubstrings(s = 'baeyh', k = 2)", "output": "2", "numsteps": 934, "problem_id": [83, 10, 0], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3210, "id": "sample_298", "function_name": "beautifulSubstrings", "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output", "input": "beautifulSubstrings(s = 'bcdf', k = 1)", "output": "0", "numsteps": 815, "problem_id": [83, 15, 2], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3210, "id": "sample_299", "function_name": "beautifulSubstrings", "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans", "input": "beautifulSubstrings(s = 'bcdf', k = 1)", "output": "0", "numsteps": 723, "problem_id": [83, 14, 2], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3210, "id": "sample_300", "function_name": "beautifulSubstrings", "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())", "input": "beautifulSubstrings(s = 'abba', k = 1)", "output": "3", "numsteps": 759, "problem_id": [83, 6, 1], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3219, "id": "sample_301", "function_name": "lexicographicallySmallestArray", "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out", "input": "lexicographicallySmallestArray(nums = [1, 5, 3, 9, 8], limit = 2)", "output": "[1, 3, 5, 8, 9]", "numsteps": 843, "problem_id": [84, 0, 0], "contest_id": "weekly-contest-373", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 2727, "id": "sample_302", "function_name": "countSeniors", "code": "def countSeniors(details: List[str]) -> int:\n    ans = 0\n    for s in details:\n        if int(s[11:13]) > 60:\n            ans += 1\n    return ans", "input": "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])", "output": "2", "numsteps": 564, "problem_id": [85, 16, 0], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "easy"}
{"question_id": 2727, "id": "sample_303", "function_name": "countSeniors", "code": "def countSeniors(details: List[str]) -> int:\n    answer = 0\n    for x in details:\n        age = x[-4:][:2]\n        age = int(age)\n        if age > 60:\n            answer+=1\n    return answer", "input": "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])", "output": "2", "numsteps": 594, "problem_id": [85, 3, 0], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "easy"}
{"question_id": 2727, "id": "sample_304", "function_name": "countSeniors", "code": "def countSeniors(details: List[str]) -> int:\n    out = 0\n    for s in details:\n        if int(int(s[11:13]) > 60):\n            out += 1\n    return out", "input": "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])", "output": "2", "numsteps": 570, "problem_id": [85, 0, 0], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "easy"}
{"question_id": 2727, "id": "sample_305", "function_name": "countSeniors", "code": "def countSeniors(details: List[str]) -> int:\n    ans=0\n    for s in details:\n        if int(s[11:13])>60:\n            ans+=1\n    return ans", "input": "countSeniors(details = ['1313579440F2036', '2921522980M5644'])", "output": "0", "numsteps": 538, "problem_id": [85, 11, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "easy"}
{"question_id": 2727, "id": "sample_306", "function_name": "countSeniors", "code": "def countSeniors(details: List[str]) -> int:\n    res = 0\n    for s in details:\n        age = int(s[11:13])\n        if age > 60:\n            res += 1\n    return res", "input": "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])", "output": "2", "numsteps": 573, "problem_id": [85, 7, 0], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "easy"}
{"question_id": 2727, "id": "sample_307", "function_name": "countSeniors", "code": "def countSeniors(details: List[str]) -> int:\n    ans = 0\n    for s in details:\n        if int(s[-4:-2]) > 60:\n            ans += 1\n    return ans", "input": "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])", "output": "2", "numsteps": 564, "problem_id": [85, 15, 0], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "easy"}
{"question_id": 2728, "id": "sample_308", "function_name": "matrixSum", "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = len(nums), len(nums[0])\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res", "input": "matrixSum(nums = [[1]])", "output": "1", "numsteps": 601, "problem_id": [86, 6, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "medium"}
{"question_id": 2728, "id": "sample_309", "function_name": "matrixSum", "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n        \n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out", "input": "matrixSum(nums = [[1]])", "output": "1", "numsteps": 580, "problem_id": [86, 0, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "medium"}
{"question_id": 2728, "id": "sample_310", "function_name": "matrixSum", "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans", "input": "matrixSum(a = [[1]])", "output": "1", "numsteps": 595, "problem_id": [86, 5, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "medium"}
{"question_id": 2728, "id": "sample_311", "function_name": "matrixSum", "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = len(nums), len(nums[0])\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans", "input": "matrixSum(nums = [[1]])", "output": "1", "numsteps": 600, "problem_id": [86, 11, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "medium"}
{"question_id": 2728, "id": "sample_312", "function_name": "matrixSum", "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list(list(l) for l in zip(*matrix))\n    return sum(map(max,mat))", "input": "matrixSum(nums = [[1]])", "output": "1", "numsteps": 587, "problem_id": [86, 13, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "medium"}
{"question_id": 2728, "id": "sample_313", "function_name": "matrixSum", "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans", "input": "matrixSum(a = [[1]])", "output": "1", "numsteps": 601, "problem_id": [86, 3, 1], "contest_id": "biweekly-contest-104", "contest_date": "2023-05-13T00:00:00", "difficulty": "medium"}
{"question_id": 2756, "id": "sample_314", "function_name": "buyChoco", "code": "from typing import List\n\ndef buyChoco(prices: List[int], money: int) -> int:\n    prices.sort()\n    if sum(prices[:2]) <= money:\n        return money - sum(prices[:2])\n    else:\n        return money", "input": "buyChoco(prices = [1, 2, 2], money = 3)", "output": "0", "numsteps": 536, "problem_id": [89, 8, 0], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "easy"}
{"question_id": 2756, "id": "sample_315", "function_name": "buyChoco", "code": "def buyChoco(prices: List[int], money: int) -> int:\n    prices.sort()\n    tot = sum(prices[:2])\n    if tot > money: return money\n    return money - tot", "input": "buyChoco(prices = [1, 2, 2], money = 3)", "output": "0", "numsteps": 526, "problem_id": [89, 11, 0], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "easy"}
{"question_id": 2756, "id": "sample_316", "function_name": "buyChoco", "code": "def buyChoco(a: List[int], money: int) -> int:\n    a.sort()\n    if a[0] + a[1] > money:\n        return money\n    return money - a[0] - a[1]", "input": "buyChoco(a = [1, 2, 2], money = 3)", "output": "0", "numsteps": 529, "problem_id": [89, 3, 0], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "easy"}
{"question_id": 2756, "id": "sample_317", "function_name": "buyChoco", "code": "def buyChoco(prices: List[int], money: int) -> int:\n    s = sum(sorted(prices)[:2])\n    return money-s if s<=money else money", "input": "buyChoco(prices = [3, 2, 3], money = 3)", "output": "3", "numsteps": 520, "problem_id": [89, 2, 1], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "easy"}
{"question_id": 2756, "id": "sample_318", "function_name": "buyChoco", "code": "def buyChoco(prices: List[int], money: int) -> int:\n  x = -1\n  n = len(prices)\n  for i in range(n):\n    for j in range(i + 1, n):\n      x = max(x, money - prices[i] - prices[j])\n  return money if x < 0 else x", "input": "buyChoco(prices = [1, 2, 2], money = 3)", "output": "0", "numsteps": 616, "problem_id": [89, 6, 0], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "easy"}
{"question_id": 2756, "id": "sample_319", "function_name": "buyChoco", "code": "def buyChoco(prices: List[int], money: int) -> int:\n    prices.sort()\n    t = prices[0] + prices[1]\n    if t > money:\n        return money\n    else:\n        return money - t", "input": "buyChoco(prices = [1, 2, 2], money = 3)", "output": "0", "numsteps": 526, "problem_id": [89, 18, 0], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "easy"}
{"question_id": 2754, "id": "sample_320", "function_name": "maxStrength", "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    \n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n\n    return max_strength", "input": "maxStrength(nums = [-4, -5, -4])", "output": "20", "numsteps": 707, "problem_id": [91, 7, 1], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "medium"}
{"question_id": 2754, "id": "sample_321", "function_name": "maxStrength", "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax", "input": "maxStrength(nums = [-4, -5, -4])", "output": "20", "numsteps": 651, "problem_id": [91, 12, 1], "contest_id": "biweekly-contest-105", "contest_date": "2023-05-27T00:00:00", "difficulty": "medium"}
{"question_id": 2824, "id": "sample_322", "function_name": "isFascinating", "code": "from typing import *\n\nfrom math import *\n\n\ndef isFascinating(n: int) -> bool:\n    x = str(n) + str(2 * n) + str(3 * n)\n    return len(set(x)) == 9 and len(x) == 9 and '0' not in x", "input": "isFascinating(n = 100)", "output": "False", "numsteps": 520, "problem_id": [93, 2, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "easy"}
{"question_id": 2824, "id": "sample_323", "function_name": "isFascinating", "code": "def isFascinating(n: int) -> bool:\n    t = \"\"\n    for i in range(1, 4):\n        t += str(i * n)\n    c = collections.Counter(t)\n    return c[\"0\"] == 0 and len(c) == 9 and len(t) == 9", "input": "isFascinating(n = 100)", "output": "False", "numsteps": 599, "problem_id": [93, 11, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "easy"}
{"question_id": 2824, "id": "sample_324", "function_name": "isFascinating", "code": "def isFascinating(n: int) -> bool:\n    s = str(n) + str(2 * n) + str(3 * n)\n    if len(s) != 9:\n        return False\n    tmp = set(s)\n    if len(tmp) != 9 or '0' in tmp:\n        return False\n    return True", "input": "isFascinating(n = 100)", "output": "False", "numsteps": 522, "problem_id": [93, 7, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "easy"}
{"question_id": 2824, "id": "sample_325", "function_name": "isFascinating", "code": "def isFascinating(n: int) -> bool:\n    s = str(n) + str(2*n) + str(3 * n)\n    s = [ch for ch in s]\n    s.sort()\n    return ''.join(s) == \"123456789\"", "input": "isFascinating(n = 100)", "output": "False", "numsteps": 582, "problem_id": [93, 5, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "easy"}
{"question_id": 2824, "id": "sample_326", "function_name": "isFascinating", "code": "def isFascinating(n: int) -> bool:\n    s = str(n) + str(n * 2) + str(n * 3)\n    st = set(str(n) + str(n * 2) + str(n * 3))\n    if len(s) == 9 and len(st) == 9 and '0' not in st:\n        return True\n    return False", "input": "isFascinating(n = 192)", "output": "True", "numsteps": 539, "problem_id": [93, 18, 0], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "easy"}
{"question_id": 2824, "id": "sample_327", "function_name": "isFascinating", "code": "def isFascinating(n: int) -> bool:\n    s = str(n)+str(2*n)+str(3*n)\n    return set(s) == set(\"123456789\") and len(s) == 9", "input": "isFascinating(n = 100)", "output": "False", "numsteps": 510, "problem_id": [93, 0, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "easy"}
{"question_id": 2786, "id": "sample_328", "function_name": "longestSemiRepetitiveSubstring", "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n-1):\n        if s[i] == s[i+1]: ii.append(i+1)\n    if len(ii) < 3: return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]): ans = max(ans, r-l)\n    return ans", "input": "longestSemiRepetitiveSubstring(s = '52233')", "output": "4", "numsteps": 628, "problem_id": [94, 10, 0], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "medium"}
{"question_id": 2786, "id": "sample_329", "function_name": "longestSemiRepetitiveSubstring", "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    \n    left = 0\n    best = 1\n    count = 0\n    \n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n            \n        best = max(best, right - left + 1)\n    return best", "input": "longestSemiRepetitiveSubstring(s = '52233')", "output": "4", "numsteps": 686, "problem_id": [94, 8, 0], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "medium"}
{"question_id": 2786, "id": "sample_330", "function_name": "longestSemiRepetitiveSubstring", "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]: ans.append(i)\n    ans.append(len(s)-1)\n    if len(ans) == 2: return len(s)\n    return max(ans[i+2]-ans[i] for i in range(len(ans)-2))", "input": "longestSemiRepetitiveSubstring(s = '5494')", "output": "4", "numsteps": 560, "problem_id": [94, 11, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "medium"}
{"question_id": 2786, "id": "sample_331", "function_name": "longestSemiRepetitiveSubstring", "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]: t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]: t -= 1\n        res = max(res, j - i + 1)\n    return res", "input": "longestSemiRepetitiveSubstring(s = '5494')", "output": "4", "numsteps": 624, "problem_id": [94, 9, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "medium"}
{"question_id": 2786, "id": "sample_332", "function_name": "longestSemiRepetitiveSubstring", "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i]-bak[i-2])\n    return mx", "input": "longestSemiRepetitiveSubstring(s = '52233')", "output": "4", "numsteps": 632, "problem_id": [94, 4, 0], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "medium"}
{"question_id": 2786, "id": "sample_333", "function_name": "longestSemiRepetitiveSubstring", "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = 0, 0\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r-1] and r > 0) < 2:\n            cnt += (s[r] == s[r-1] and r > 0)\n            r += 1\n        ans = max(ans, r - l)\n        if l == n-1: break\n        cnt -= s[l] == s[l+1]\n        l += 1\n    return ans", "input": "longestSemiRepetitiveSubstring(s = '5494')", "output": "4", "numsteps": 820, "problem_id": [94, 12, 1], "contest_id": "biweekly-contest-106", "contest_date": "2023-06-10T00:00:00", "difficulty": "medium"}
{"question_id": 2847, "id": "sample_334", "function_name": "maximumNumberOfStringPairs", "code": "from typing import *\n\nfrom math import *\n\ndef maximumNumberOfStringPairs(words: List[str]) -> int:\n    a = 0\n    for i in words:\n        if i[::-1] in words and i != i[::-1]:\n            a+=1\n    return a//2", "input": "maximumNumberOfStringPairs(words = ['aa', 'ab'])", "output": "0", "numsteps": 557, "problem_id": [95, 12, 2], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "easy"}
{"question_id": 2847, "id": "sample_335", "function_name": "maximumNumberOfStringPairs", "code": "def maximumNumberOfStringPairs(words: List[str]) -> int:\n    cnt = collections.Counter(words)\n    ans = 0\n    keys = list(cnt.keys())\n    vis = set()\n    for key in keys:\n        if key == key[::-1]:\n            ans += cnt[key] // 2\n        elif key not in vis:\n            vis.add(key)\n            vis.add(key[::-1])\n            ans += min(cnt[key], cnt[key[::-1]])\n    return ans", "input": "maximumNumberOfStringPairs(words = ['cd', 'ac', 'dc', 'ca', 'zz'])", "output": "2", "numsteps": 745, "problem_id": [95, 0, 0], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "easy"}
{"question_id": 2847, "id": "sample_336", "function_name": "maximumNumberOfStringPairs", "code": "def maximumNumberOfStringPairs(words: List[str]) -> int:\n    c = Counter()\n    res = 0\n    for i in words:\n        si = \"\".join(i[::-1])\n        if c[si]:\n            c[si] -= 1\n            res += 1\n        else:\n            c[i] += 1\n    return res", "input": "maximumNumberOfStringPairs(words = ['ab', 'ba', 'cc'])", "output": "1", "numsteps": 658, "problem_id": [95, 4, 1], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "easy"}
{"question_id": 2847, "id": "sample_337", "function_name": "maximumNumberOfStringPairs", "code": "def maximumNumberOfStringPairs(words: List[str]) -> int:\n    s = set(words)\n    ans = 0\n    for word in words:\n        if word != word[::-1] and word[::-1] in s:\n            ans += 1\n    return ans // 2", "input": "maximumNumberOfStringPairs(words = ['cd', 'ac', 'dc', 'ca', 'zz'])", "output": "2", "numsteps": 642, "problem_id": [95, 8, 0], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "easy"}
{"question_id": 2847, "id": "sample_338", "function_name": "maximumNumberOfStringPairs", "code": "def maximumNumberOfStringPairs(words: List[str]) -> int:\n    s = set()\n    ans = 0\n    for w in words:\n        if w[::-1] in s:\n            ans += 1\n            s.remove(w[::-1])\n        else:\n            s.add(w)\n    return ans", "input": "maximumNumberOfStringPairs(words = ['ab', 'ba', 'cc'])", "output": "1", "numsteps": 584, "problem_id": [95, 14, 1], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "easy"}
{"question_id": 2847, "id": "sample_339", "function_name": "maximumNumberOfStringPairs", "code": "def maximumNumberOfStringPairs(words: List[str]) -> int:\n    seen = set()\n    ans = 0 \n    for w in words:\n        if w in seen:\n            ans += 1\n        else:\n            seen.add(w[::-1])\n            \n    return ans", "input": "maximumNumberOfStringPairs(words = ['ab', 'ba', 'cc'])", "output": "1", "numsteps": 568, "problem_id": [95, 13, 1], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "easy"}
{"question_id": 2850, "id": "sample_340", "function_name": "longestString", "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2", "input": "longestString(x = 2, y = 5, z = 1)", "output": "12", "numsteps": 508, "problem_id": [96, 9, 0], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "medium"}
{"question_id": 2850, "id": "sample_341", "function_name": "longestString", "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)", "input": "longestString(x = 3, y = 2, z = 2)", "output": "14", "numsteps": 506, "problem_id": [96, 0, 1], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "medium"}
{"question_id": 2850, "id": "sample_342", "function_name": "longestString", "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans  + z) * 2", "input": "longestString(x = 2, y = 5, z = 1)", "output": "12", "numsteps": 512, "problem_id": [96, 5, 0], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "medium"}
{"question_id": 2854, "id": "sample_343", "function_name": "minimizeConcatenatedLength", "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda:inf)\n    A[words[0][0]+words[0][-1]] = len(words[0]) \n    for w in words[1:]:\n        B = defaultdict(lambda:inf) \n        for a,x in A.items():\n            B[a[0]+w[-1]] = min(B[a[0]+w[-1]],x+len(w) - (a[-1]==w[0]) )\n            B[w[0]+a[-1]] = min(B[w[0]+a[-1]],x+len(w) - (w[-1]==a[0]) ) \n        A,B = B ,A \n    return min(A.values())", "input": "minimizeConcatenatedLength(words = ['aaa', 'c', 'aba'])", "output": "6", "numsteps": 834, "problem_id": [97, 7, 2], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "medium"}
{"question_id": 2854, "id": "sample_344", "function_name": "minimizeConcatenatedLength", "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])", "input": "minimizeConcatenatedLength(words = ['aa', 'ab', 'bc'])", "output": "4", "numsteps": 972, "problem_id": [97, 10, 0], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "medium"}
{"question_id": 2854, "id": "sample_345", "function_name": "minimizeConcatenatedLength", "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])", "input": "minimizeConcatenatedLength(words = ['ab', 'b'])", "output": "2", "numsteps": 813, "problem_id": [97, 1, 1], "contest_id": "biweekly-contest-107", "contest_date": "2023-06-24T00:00:00", "difficulty": "medium"}
{"question_id": 2870, "id": "sample_346", "function_name": "alternatingSubarray", "code": "def alternatingSubarray(nums: List[int]) -> int:\n    n = len(nums)\n    ans = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            \n            if nums[j] != nums[i] + ((j - i) & 1):\n                break\n            \n            ans = max(ans, j - i + 1)\n    return ans", "input": "alternatingSubarray(nums = [4, 5, 6])", "output": "2", "numsteps": 632, "problem_id": [99, 15, 1], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "easy"}
{"question_id": 2870, "id": "sample_347", "function_name": "alternatingSubarray", "code": "def alternatingSubarray(nums: List[int]) -> int:\n    ans = -1\n    n = len(nums)\n    for i in range(n):\n        delta = 1\n        for j in range(i + 1, n):\n            if nums[j] - nums[j - 1] == delta:\n                ans = max(ans, j - i + 1)\n                delta = -delta\n            else:\n                break\n    return ans", "input": "alternatingSubarray(nums = [2, 3, 4, 3, 4])", "output": "4", "numsteps": 784, "problem_id": [99, 4, 0], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "easy"}
{"question_id": 2870, "id": "sample_348", "function_name": "alternatingSubarray", "code": "def alternatingSubarray(nums: List[int]) -> int:\n    n = len(nums)\n    ans = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (j - i) & 1:\n                if nums[j] != nums[i] + 1:\n                    break\n            else:\n                if nums[j] != nums[i]:\n                    break\n            ans = max(ans, j - i + 1)\n    return ans", "input": "alternatingSubarray(nums = [4, 5, 6])", "output": "2", "numsteps": 639, "problem_id": [99, 12, 1], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "easy"}
{"question_id": 2870, "id": "sample_349", "function_name": "alternatingSubarray", "code": "def alternatingSubarray(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    ans = -1\n    \n    for i in range(n-1):\n        if nums[i+1]==nums[i]+1:\n            j = i+1\n            while j+1<n and nums[j+1]==nums[j-1]:\n                j+=1\n            ans=max(ans,j-i+1)\n    \n    return ans", "input": "alternatingSubarray(nums = [4, 5, 6])", "output": "2", "numsteps": 609, "problem_id": [99, 11, 1], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "easy"}
{"question_id": 2870, "id": "sample_350", "function_name": "alternatingSubarray", "code": "def alternatingSubarray(nums: List[int]) -> int:\n    n = len(nums)\n    maxres = -1\n    for i,(a,b) in enumerate(zip(nums, nums[1:])):\n        if b-a == 1:\n            i += 2\n            count = 2\n            while i < n and nums[i] == nums[i-2]:\n                i += 1\n                count += 1\n            maxres = max(maxres, count)\n    return maxres", "input": "alternatingSubarray(nums = [2, 3, 4, 3, 4])", "output": "4", "numsteps": 702, "problem_id": [99, 6, 0], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "easy"}
{"question_id": 2870, "id": "sample_351", "function_name": "alternatingSubarray", "code": "def alternatingSubarray(nums: List[int]) -> int:\n    res = 0\n    for i in range(len(nums)):\n        r = 1\n        for j in range(i + 1, len(nums)):\n            if nums[j] - nums[j - 1] == -1 + 2 * ((j - i) & 1):\n                r += 1\n                res = max(res, r)\n            else:\n                break\n    return res if res > 0 else -1", "input": "alternatingSubarray(nums = [2, 3, 4, 3, 4])", "output": "4", "numsteps": 836, "problem_id": [99, 3, 0], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "easy"}
{"question_id": 2834, "id": "sample_352", "function_name": "relocateMarbles", "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x,y in zip(moveFrom,moveTo):\n        tmp = d[x]\n        d[x]-=tmp\n        d[y]+=tmp\n    return [x for x in sorted(d) if d[x]>0]", "input": "relocateMarbles(nums = [1, 1, 3, 3], moveFrom = [1, 3], moveTo = [2, 2])", "output": "[2]", "numsteps": 729, "problem_id": [100, 1, 1], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2834, "id": "sample_353", "function_name": "relocateMarbles", "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)  # 初始有石块的位置\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)  # i不再是有石块的位置\n        loc.add(j)  # 不管之前有没有石块，j成为有石块的位置\n    return sorted(loc)", "input": "relocateMarbles(nums = [1, 1, 3, 3], moveFrom = [1, 3], moveTo = [2, 2])", "output": "[2]", "numsteps": 607, "problem_id": [100, 7, 1], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2834, "id": "sample_354", "function_name": "relocateMarbles", "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))", "input": "relocateMarbles(nums = [1, 6, 7, 8], moveFrom = [1, 7, 2], moveTo = [2, 9, 5])", "output": "[5, 6, 8, 9]", "numsteps": 678, "problem_id": [100, 2, 0], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2834, "id": "sample_355", "function_name": "relocateMarbles", "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)", "input": "relocateMarbles(nums = [1, 1, 3, 3], moveFrom = [1, 3], moveTo = [2, 2])", "output": "[2]", "numsteps": 655, "problem_id": [100, 5, 1], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2834, "id": "sample_356", "function_name": "relocateMarbles", "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)", "input": "relocateMarbles(nums = [1, 6, 7, 8], moveFrom = [1, 7, 2], moveTo = [2, 9, 5])", "output": "[5, 6, 8, 9]", "numsteps": 626, "problem_id": [100, 0, 0], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2834, "id": "sample_357", "function_name": "relocateMarbles", "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a,b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)", "input": "relocateMarbles(nums = [1, 6, 7, 8], moveFrom = [1, 7, 2], moveTo = [2, 9, 5])", "output": "[5, 6, 8, 9]", "numsteps": 669, "problem_id": [100, 14, 0], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2883, "id": "sample_358", "function_name": "minimumBeautifulSubstrings", "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1e9)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1e9) else dp[n]", "input": "minimumBeautifulSubstrings(s = '0')", "output": "-1", "numsteps": 603, "problem_id": [101, 6, 2], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2883, "id": "sample_359", "function_name": "minimumBeautifulSubstrings", "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]", "input": "minimumBeautifulSubstrings(s = '0')", "output": "-1", "numsteps": 599, "problem_id": [101, 3, 2], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2883, "id": "sample_360", "function_name": "minimumBeautifulSubstrings", "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx == n: return 0\n        ans = inf\n        for j in range(idx+1, n+1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1", "input": "minimumBeautifulSubstrings(s = '0')", "output": "-1", "numsteps": 991, "problem_id": [101, 0, 2], "contest_id": "biweekly-contest-108", "contest_date": "2023-07-08T00:00:00", "difficulty": "medium"}
{"question_id": 2892, "id": "sample_361", "function_name": "isGood", "code": "def isGood(a: List[int]) -> bool:\n    \n    n = len(a) - 1\n    for i in range(1, n):\n        if a.count(i) != 1:\n            return False\n    \n    return a.count(n) == 2", "input": "isGood(a = [3, 4, 4, 1, 2, 1])", "output": "False", "numsteps": 527, "problem_id": [102, 6, 3], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "easy"}
{"question_id": 2892, "id": "sample_362", "function_name": "isGood", "code": "def isGood(nums: List[int]) -> bool:\n    nums.sort()\n    n = len(nums) - 1\n    \n    res = True\n    for i in range(n):\n        if nums[i] != i+1: return False\n    \n    return nums[-1] == n", "input": "isGood(nums = [3, 4, 4, 1, 2, 1])", "output": "False", "numsteps": 546, "problem_id": [102, 11, 3], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "easy"}
{"question_id": 2892, "id": "sample_363", "function_name": "isGood", "code": "def isGood(nums: List[int]) -> bool:\n    \n    mx = max(nums)\n    \n    c = nums.count(mx)\n    \n    if len(nums) != mx + 1 or c != 2:\n        return False\n    \n    for i in range(1, mx):\n        if nums.count(i) != 1:\n            return False\n    \n    return True", "input": "isGood(nums = [1, 1])", "output": "True", "numsteps": 534, "problem_id": [102, 12, 2], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "easy"}
{"question_id": 2892, "id": "sample_364", "function_name": "isGood", "code": "def isGood(nums: List[int]) -> bool:\n    return sorted(nums)==list(range(1,len(nums)))+[len(nums)-1]", "input": "isGood(nums = [1, 1])", "output": "True", "numsteps": 521, "problem_id": [102, 15, 2], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "easy"}
{"question_id": 2892, "id": "sample_365", "function_name": "isGood", "code": "def isGood(nums: List[int]) -> bool:\n    if len(nums)==1:\n        return False\n    nums.sort()\n    n = len(nums)\n    if nums[-1] != nums[-2]:\n        return False\n    for i in range(n-1):\n        if nums[i] != i+1:\n            return False\n    return True", "input": "isGood(nums = [2, 1, 3])", "output": "False", "numsteps": 529, "problem_id": [102, 2, 0], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "easy"}
{"question_id": 2892, "id": "sample_366", "function_name": "isGood", "code": "def isGood(nums: List[int]) -> bool:\n    return sorted(nums) == ([i + 1 for i in range(len(nums) - 1)] + [len(nums) - 1])", "input": "isGood(nums = [1, 3, 3, 2])", "output": "True", "numsteps": 556, "problem_id": [102, 0, 1], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "easy"}
{"question_id": 2887, "id": "sample_367", "function_name": "sortVowels", "code": "def sortVowels(s: str) -> str:\n    ss = \"aeiouAEIOU\"\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return \"\".join(ans)", "input": "sortVowels(s = 'lYmpH')", "output": "'lYmpH'", "numsteps": 634, "problem_id": [103, 8, 1], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "medium"}
{"question_id": 2887, "id": "sample_368", "function_name": "sortVowels", "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = vowels[i], v2[i]\n        answer[j] = c\n    return ''.join(answer)", "input": "sortVowels(s = 'lYmpH')", "output": "'lYmpH'", "numsteps": 663, "problem_id": [103, 2, 1], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "medium"}
{"question_id": 2887, "id": "sample_369", "function_name": "sortVowels", "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    n = len(s)\n    \n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    \n    vs = sorted(v, key=lambda i: s[i])\n    \n    ss = s[:]\n    \n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    \n    return ''.join(s)", "input": "sortVowels(s = 'lYmpH')", "output": "'lYmpH'", "numsteps": 594, "problem_id": [103, 12, 1], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "medium"}
{"question_id": 2887, "id": "sample_370", "function_name": "sortVowels", "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    a = []\n    n = len(s)\n    \n    for i in range(n):\n        \n        if s[i] in \"aeiouAEIOU\":\n            a.append(s[i])\n    \n    a.sort(reverse=True)\n    \n    for i in range(n):\n        if s[i] in \"aeiouAEIOU\":\n            s[i] = a.pop()\n    \n    return \"\".join(s)", "input": "sortVowels(s = 'lEetcOde')", "output": "'lEOtcede'", "numsteps": 749, "problem_id": [103, 6, 0], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "medium"}
{"question_id": 2887, "id": "sample_371", "function_name": "sortVowels", "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in \"aeiou\" or s[i] in \"AEIOU\":\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return \"\".join(res)", "input": "sortVowels(s = 'lYmpH')", "output": "'lYmpH'", "numsteps": 604, "problem_id": [103, 1, 1], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "medium"}
{"question_id": 2887, "id": "sample_372", "function_name": "sortVowels", "code": "def vowel(ch): return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)", "input": "sortVowels(s = 'lEetcOde')", "output": "'lEOtcede'", "numsteps": 872, "problem_id": [103, 9, 0], "contest_id": "biweekly-contest-109", "contest_date": "2023-07-22T00:00:00", "difficulty": "medium"}
{"question_id": 2955, "id": "sample_373", "function_name": "accountBalanceAfterPurchase", "code": "def accountBalanceAfterPurchase(p: int) -> int:\n    a, b = divmod(p, 10)\n    if b < 5:\n        return 100 - a * 10\n    else:\n        return 90 - a * 10", "input": "accountBalanceAfterPurchase(p = 9)", "output": "90", "numsteps": 503, "problem_id": [106, 72, 0], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "easy"}
{"question_id": 2920, "id": "sample_374", "function_name": "minimumSeconds", "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret", "input": "minimumSeconds(nums = [5, 5, 5, 5])", "output": "0", "numsteps": 733, "problem_id": [107, 32, 2], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "medium"}
{"question_id": 2920, "id": "sample_375", "function_name": "minimumSeconds", "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2== 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans", "input": "minimumSeconds(nums = [5, 5, 5, 5])", "output": "0", "numsteps": 755, "problem_id": [107, 2, 2], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "medium"}
{"question_id": 2920, "id": "sample_376", "function_name": "minimumSeconds", "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n-idxs[-1] + idxs[0]\n        for i in range(len(idxs)-1):\n            gap = max(gap, idxs[i+1]-idxs[i])\n        min_steps = min(min_steps, gap//2)\n    return min_steps", "input": "minimumSeconds(nums = [5, 5, 5, 5])", "output": "0", "numsteps": 673, "problem_id": [107, 6, 2], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "medium"}
{"question_id": 2920, "id": "sample_377", "function_name": "minimumSeconds", "code": "def minimumSeconds(nums: List[int]) -> int:\n    d=defaultdict(list)\n    for i,el in enumerate(nums):\n        d[el].append(i)\n    ans=float(\"inf\")\n    def check(el):\n        t=d[el][:]\n        g=[t[0]+len(nums)-1-t[-1]]\n        for a,b in zip(t,t[1:]):\n            g.append(b-a-1)\n        # print(g,el)\n        p=max(g)\n        return (p+1)//2\n    for el in d:\n        ans=min(ans,check(el))\n    return ans", "input": "minimumSeconds(nums = [5, 5, 5, 5])", "output": "0", "numsteps": 697, "problem_id": [107, 16, 2], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "medium"}
{"question_id": 2920, "id": "sample_378", "function_name": "minimumSeconds", "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i+1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans", "input": "minimumSeconds(A = [5, 5, 5, 5])", "output": "0", "numsteps": 692, "problem_id": [107, 11, 2], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "medium"}
{"question_id": 2920, "id": "sample_379", "function_name": "minimumSeconds", "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = defaultdict(list), (len(nums))//2\n    for i, n in enumerate(nums): idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0]+(len(nums)-idx[-1]))//2\n            for i in range(len(idx)-1): cur = max(cur, (idx[i+1]-idx[i])//2)\n            res = min(res, cur)\n    return res", "input": "minimumSeconds(nums = [1, 2, 1, 2])", "output": "1", "numsteps": 709, "problem_id": [107, 54, 0], "contest_id": "biweekly-contest-110", "contest_date": "2023-08-05T00:00:00", "difficulty": "medium"}
{"question_id": 2917, "id": "sample_380", "function_name": "countPairs", "code": "def countPairs(nums: List[int], target: int) -> int:\n    n = len(nums)\n    ans = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if nums[i]+nums[j]<target:\n                ans+=1\n    \n    return ans", "input": "countPairs(nums = [-1, 1, 2, 3, 1], target = 2)", "output": "3", "numsteps": 742, "problem_id": [109, 16, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "easy"}
{"question_id": 2917, "id": "sample_381", "function_name": "countPairs", "code": "def countPairs(nums: List[int], t: int) -> int:\n    n=len(nums)\n    res=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if nums[i]+nums[j]<t:\n                res+=1\n    return res", "input": "countPairs(nums = [-1, 1, 2, 3, 1], t = 2)", "output": "3", "numsteps": 742, "problem_id": [109, 12, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "easy"}
{"question_id": 2917, "id": "sample_382", "function_name": "countPairs", "code": "def countPairs(nums: List[int], target: int) -> int:\n    res = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] < target:\n                res += 1\n    return res", "input": "countPairs(nums = [-1, 1, 2, 3, 1], target = 2)", "output": "3", "numsteps": 736, "problem_id": [109, 11, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "easy"}
{"question_id": 2917, "id": "sample_383", "function_name": "countPairs", "code": "def countPairs(nums: List[int], target: int) -> int:\n    ans = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            ans += nums[i] + nums[j] < target\n    return ans", "input": "countPairs(nums = [-1, 1, 2, 3, 1], target = 2)", "output": "3", "numsteps": 761, "problem_id": [109, 15, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "easy"}
{"question_id": 2917, "id": "sample_384", "function_name": "countPairs", "code": "def countPairs(nums: List[int], target: int) -> int:\n    n = len(nums)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] < target:\n                res += 1\n    return res", "input": "countPairs(nums = [-1, 1, 2, 3, 1], target = 2)", "output": "3", "numsteps": 742, "problem_id": [109, 13, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "easy"}
{"question_id": 2917, "id": "sample_385", "function_name": "countPairs", "code": "def countPairs(nums: List[int], target: int) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1,n):\n            if nums[i] + nums[j] < target:\n                ans += 1\n    return ans", "input": "countPairs(nums = [-1, 1, 2, 3, 1], target = 2)", "output": "3", "numsteps": 742, "problem_id": [109, 0, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "easy"}
{"question_id": 3018, "id": "sample_386", "function_name": "canMakeSubsequence", "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = len(str1), len(str2)\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False", "input": "canMakeSubsequence(str1 = 'ab', str2 = 'd')", "output": "False", "numsteps": 583, "problem_id": [110, 12, 2], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "medium"}
{"question_id": 3018, "id": "sample_387", "function_name": "canMakeSubsequence", "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n    def nxt(c):\n        if c == 'z':\n            return 'a' \n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)", "input": "canMakeSubsequence(str1 = 'ab', str2 = 'd')", "output": "False", "numsteps": 617, "problem_id": [110, 10, 2], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "medium"}
{"question_id": 3018, "id": "sample_388", "function_name": "canMakeSubsequence", "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    \n    def cal(i):\n        if i=='z':\n            return 'a'\n        return chr(ord(i)+1)\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    i = 0\n    j = 0\n    \n    while i<n1 and j<n2:\n        if str1[i]==str2[j] or cal(str1[i])==str2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    return j>=n2", "input": "canMakeSubsequence(str1 = 'ab', str2 = 'd')", "output": "False", "numsteps": 616, "problem_id": [110, 15, 2], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "medium"}
{"question_id": 3018, "id": "sample_389", "function_name": "canMakeSubsequence", "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False", "input": "canMakeSubsequence(str1 = 'ab', str2 = 'd')", "output": "False", "numsteps": 557, "problem_id": [110, 9, 2], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "medium"}
{"question_id": 3018, "id": "sample_390", "function_name": "canMakeSubsequence", "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1=list(s1)\n    s2=list(s2)\n    while s1 and s2:\n        c1=s1[-1]\n        c2=s2[-1]\n        if c1==c2 or (c1==\"z\" and c2==\"a\") or chr(ord(c1)+1)==c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2)==0", "input": "canMakeSubsequence(s1 = 'abc', s2 = 'ad')", "output": "True", "numsteps": 621, "problem_id": [110, 11, 0], "contest_id": "biweekly-contest-111", "contest_date": "2023-08-19T00:00:00", "difficulty": "medium"}
{"question_id": 2999, "id": "sample_391", "function_name": "canBeEqual", "code": "def canBeEqual(s1: str, s2: str) -> bool:\n    s3 = s1[0] + s1[3] + s1[2] + s1[1]\n    s4 = s1[2] + s1[3] + s1[0] + s1[1]\n    s5 = s1[2] + s1[1] + s1[0] + s1[3]\n    return s2 == s1 or s2 == s3 or s2 == s4 or s2 == s5", "input": "canBeEqual(s1 = 'abcd', s2 = 'cdab')", "output": "True", "numsteps": 550, "problem_id": [112, 15, 0], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "easy"}
{"question_id": 2999, "id": "sample_392", "function_name": "canBeEqual", "code": "def canBeEqual(s1: str, s2: str) -> bool:\n    a = list(s1)\n    b = list(s2)\n    if a[0] > a[2]:\n        a[0], a[2] = a[2], a[0]\n    if a[1] > a[3]:\n        a[1], a[3] = a[3], a[1]\n    if b[0] > b[2]:\n        b[0], b[2] = b[2], b[0]\n    if b[1] > b[3]:\n        b[1], b[3] = b[3], b[1]\n    return ''.join(a) == ''.join(b)", "input": "canBeEqual(s1 = 'abcd', s2 = 'dacb')", "output": "False", "numsteps": 556, "problem_id": [112, 1, 1], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "easy"}
{"question_id": 2999, "id": "sample_393", "function_name": "canBeEqual", "code": "def canBeEqual(s1: str, s2: str) -> bool:\n    \n    lst1 = [s1[0], s1[2]]\n    lst2 = [s2[0], s2[2]]\n    if sorted(lst1) != sorted(lst2):\n        return False\n    lst1 = [s1[1], s1[3]]\n    lst2 = [s2[1], s2[3]]\n    if sorted(lst1) != sorted(lst2):\n        return False\n    return True", "input": "canBeEqual(s1 = 'abcd', s2 = 'dacb')", "output": "False", "numsteps": 515, "problem_id": [112, 3, 1], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "easy"}
{"question_id": 2999, "id": "sample_394", "function_name": "canBeEqual", "code": "def canBeEqual(s1: str, s2: str) -> bool:\n    a = [s1[0], s1[2]]\n    b = [s2[0], s2[2]]\n    a.sort()\n    b.sort()\n    if a != b:\n        return False\n    a = [s1[1], s1[3]]\n    b = [s2[1], s2[3]]\n    a.sort()\n    b.sort()\n    return a == b", "input": "canBeEqual(s1 = 'abcd', s2 = 'cdab')", "output": "True", "numsteps": 551, "problem_id": [112, 10, 0], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "easy"}
{"question_id": 2999, "id": "sample_395", "function_name": "canBeEqual", "code": "def canBeEqual(s1: str, s2: str) -> bool:\n    def sign(s):\n        return sorted(s[::2]), sorted(s[1::2])\n        \n    return sign(s1) == sign(s2)", "input": "canBeEqual(s1 = 'abcd', s2 = 'dacb')", "output": "False", "numsteps": 541, "problem_id": [112, 7, 1], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "easy"}
{"question_id": 2999, "id": "sample_396", "function_name": "canBeEqual", "code": "def canBeEqual(s1: str, s2: str) -> bool:\n    def cut(s):\n        return (sorted(s[::2]), sorted(s[1::2]))\n    \n    return cut(s1) == cut(s2)", "input": "canBeEqual(s1 = 'abcd', s2 = 'dacb')", "output": "False", "numsteps": 541, "problem_id": [112, 9, 1], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "easy"}
{"question_id": 2954, "id": "sample_397", "function_name": "maxSum", "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n            \n    return max_sum", "input": "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)", "output": "0", "numsteps": 637, "problem_id": [113, 10, 2], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "medium"}
{"question_id": 2954, "id": "sample_398", "function_name": "maxSum", "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i-k]] -= 1\n        if not c[nums[i-k]]:\n            del c[nums[i-k]]\n        ssum += nums[i] - nums[i-k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res", "input": "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)", "output": "0", "numsteps": 873, "problem_id": [113, 1, 2], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "medium"}
{"question_id": 2954, "id": "sample_399", "function_name": "maxSum", "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1: c += 1\n        s += x\n        if r >= k:\n            y = nums[r-k]\n            cnt[y] -= 1\n            if cnt[y] == 0: c -= 1\n            s -= y\n        if c >= m: ans = max(ans,s)\n    return ans", "input": "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)", "output": "0", "numsteps": 899, "problem_id": [113, 12, 2], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "medium"}
{"question_id": 2954, "id": "sample_400", "function_name": "maxSum", "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res", "input": "maxSum(A = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)", "output": "0", "numsteps": 829, "problem_id": [113, 15, 2], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "medium"}
{"question_id": 2954, "id": "sample_401", "function_name": "maxSum", "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans", "input": "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)", "output": "0", "numsteps": 894, "problem_id": [113, 5, 2], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "medium"}
{"question_id": 2954, "id": "sample_402", "function_name": "maxSum", "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    \n    return maxres", "input": "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)", "output": "0", "numsteps": 787, "problem_id": [113, 4, 2], "contest_id": "biweekly-contest-112", "contest_date": "2023-09-02T00:00:00", "difficulty": "medium"}
{"question_id": 3045, "id": "sample_403", "function_name": "minimumRightShifts", "code": "def minimumRightShifts(nums: List[int]) -> int:\n    s = sorted(nums)\n    n = len(nums)\n    for i in range(n + 10):\n        t = [nums[-1]] + nums[:-1][:]\n        if s == t:\n            return (i + 1) % n\n        nums = t[:]\n        # print('t', t, nums)\n    else:\n        return -1", "input": "minimumRightShifts(nums = [2, 1, 4])", "output": "-1", "numsteps": 937, "problem_id": [114, 11, 2], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "easy"}
{"question_id": 3045, "id": "sample_404", "function_name": "minimumRightShifts", "code": "def minimumRightShifts(nums: List[int]) -> int:\n    m = min(nums)\n    for i in range(len(nums)):\n        if m == nums[i]:\n            nums = nums[i:] + nums[:i]\n            for j in range(len(nums) - 1):\n                if nums[j] > nums[j + 1]:\n                    return -1\n            return len(nums) - i if i > 0 else 0\n    return -1", "input": "minimumRightShifts(nums = [3, 4, 5, 1, 2])", "output": "2", "numsteps": 644, "problem_id": [114, 15, 0], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "easy"}
{"question_id": 3045, "id": "sample_405", "function_name": "minimumRightShifts", "code": "def minimumRightShifts(nums: List[int]) -> int:\n    n = len(nums)\n    for i in range(n):\n        check = True\n        for j in range(n - i + 1, n * 2 - i):\n            if nums[j % n] < nums[(j - 1) % n]:\n                check = False\n                break\n        if check: return i\n    return -1", "input": "minimumRightShifts(nums = [1, 3, 5])", "output": "0", "numsteps": 573, "problem_id": [114, 10, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "easy"}
{"question_id": 3045, "id": "sample_406", "function_name": "minimumRightShifts", "code": "def minimumRightShifts(nums: List[int]) -> int:\n    b = sorted(nums)\n    ans = inf\n    n = len(nums)\n    for i in range(n):\n        a = nums[i:] + nums[:i]\n        if a == b:\n            ans = min(ans, (n - i) % n)\n    return -1 if ans == inf else ans", "input": "minimumRightShifts(nums = [1, 3, 5])", "output": "0", "numsteps": 600, "problem_id": [114, 3, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "easy"}
{"question_id": 3045, "id": "sample_407", "function_name": "minimumRightShifts", "code": "def minimumRightShifts(nums: List[int]) -> int:\n    n = len(nums)\n    t = sorted(nums)\n    if t == nums:\n        return 0\n    for i in range(1, n+1):\n        nums = [nums[-1]] + nums[:-1]\n        if t == nums:\n            return i\n    return -1", "input": "minimumRightShifts(nums = [1, 3, 5])", "output": "0", "numsteps": 518, "problem_id": [114, 0, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "easy"}
{"question_id": 3045, "id": "sample_408", "function_name": "minimumRightShifts", "code": "def minimumRightShifts(nums: List[int]) -> int:\n    def f(l):\n        for i in range(1, len(l)):\n            if l[i] < l[i - 1]:\n                return False\n        return True\n    \n    for i in range(len(nums)):\n        if f(nums):\n            return i\n        p = nums.pop()\n        nums = [p] + nums\n    return -1", "input": "minimumRightShifts(nums = [1, 3, 5])", "output": "0", "numsteps": 566, "problem_id": [114, 7, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "easy"}
{"question_id": 3081, "id": "sample_409", "function_name": "minLengthAfterRemovals", "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k,v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2", "input": "minLengthAfterRemovals(nums = [1, 3, 4, 9])", "output": "0", "numsteps": 622, "problem_id": [115, 9, 0], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 3081, "id": "sample_410", "function_name": "minLengthAfterRemovals", "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    \n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1", "input": "minLengthAfterRemovals(nums = [1, 3, 4, 9])", "output": "0", "numsteps": 582, "problem_id": [115, 11, 0], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 3081, "id": "sample_411", "function_name": "minLengthAfterRemovals", "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1 \n        y -= 1 \n        if x:heappush(h,-x)\n        if y:heappush(h,-y)\n    return -sum(h)", "input": "minLengthAfterRemovals(nums = [2, 3, 6, 9])", "output": "0", "numsteps": 693, "problem_id": [115, 5, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 3081, "id": "sample_412", "function_name": "minLengthAfterRemovals", "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = n // 2 - 1, n - 1\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans", "input": "minLengthAfterRemovals(nums = [2, 3, 6, 9])", "output": "0", "numsteps": 605, "problem_id": [115, 10, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 3081, "id": "sample_413", "function_name": "minLengthAfterRemovals", "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2", "input": "minLengthAfterRemovals(nums = [1, 1, 2])", "output": "1", "numsteps": 583, "problem_id": [115, 8, 2], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 3081, "id": "sample_414", "function_name": "minLengthAfterRemovals", "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1", "input": "minLengthAfterRemovals(nums = [1, 1, 2])", "output": "1", "numsteps": 583, "problem_id": [115, 7, 2], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 2953, "id": "sample_415", "function_name": "countPairs", "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[(x, y)] += 1\n    \n    res = 0\n    for i in range(k + 1):\n        a, b = i, k - i\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[(x, y)] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[(a ^ x, b ^ y)]\n    \n    return res", "input": "countPairs(coordinates = [[1, 3], [1, 3], [1, 3], [1, 3], [1, 3]], k = 0)", "output": "10", "numsteps": 875, "problem_id": [116, 11, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 2953, "id": "sample_416", "function_name": "countPairs", "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[(i, j)] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[(i, j)] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = (k - r) ^ j\n            ans += c[(x, y)]\n    return ans", "input": "countPairs(coordinates = [[1, 3], [1, 3], [1, 3], [1, 3], [1, 3]], k = 0)", "output": "10", "numsteps": 895, "problem_id": [116, 8, 1], "contest_id": "biweekly-contest-113", "contest_date": "2023-09-16T00:00:00", "difficulty": "medium"}
{"question_id": 3044, "id": "sample_417", "function_name": "minOperations", "code": "def minOperations(nums: List[int], k: int) -> int:\n    have = set()\n    for i, n in enumerate(reversed(nums)): \n        if n <= k: have.add(n)\n        if len(have) == k: return i+1", "input": "minOperations(nums = [3, 1, 5, 4, 2], k = 5)", "output": "5", "numsteps": 628, "problem_id": [117, 15, 1], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "easy"}
{"question_id": 3044, "id": "sample_418", "function_name": "minOperations", "code": "def minOperations(nums: List[int], k: int) -> int:\n    s = set()\n    for j, n in enumerate(nums[::-1]):\n        s.add(n)\n        flag = True\n        for i in range(1, k + 1):\n            if i not in s:\n                flag = False\n        if flag: return j + 1", "input": "minOperations(nums = [3, 2, 5, 3, 1], k = 3)", "output": "4", "numsteps": 737, "problem_id": [117, 17, 2], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "easy"}
{"question_id": 3044, "id": "sample_419", "function_name": "minOperations", "code": "def minOperations(nums: List[int], k: int) -> int:\n    nums = nums[::-1]\n    s = set()\n    for i,c in enumerate(nums):\n        if c>k:\n            continue\n        s.add(c)\n        if len(s)==k:\n            return i+1;", "input": "minOperations(nums = [3, 1, 5, 4, 2], k = 2)", "output": "4", "numsteps": 595, "problem_id": [117, 2, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "easy"}
{"question_id": 3044, "id": "sample_420", "function_name": "minOperations", "code": "def minOperations(nums: List[int], k: int) -> int:\n    ct = 0\n    st = set()\n    for v in nums[::-1]:\n        ct += 1\n        if v <= k:\n            st.add(v)\n            if len(st) == k:\n                return ct", "input": "minOperations(nums = [3, 2, 5, 3, 1], k = 3)", "output": "4", "numsteps": 612, "problem_id": [117, 13, 2], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "easy"}
{"question_id": 3044, "id": "sample_421", "function_name": "minOperations", "code": "def minOperations(nums: List[int], k: int) -> int:\n    vis = [0] * (k + 1)\n    cnt = 0\n    n = len(nums)\n    for i in range(n - 1, -1, -1):\n        if nums[i] <= k and not vis[nums[i]]:\n            vis[nums[i]] = 1\n            cnt += 1\n            if cnt == k:\n                return n - i", "input": "minOperations(nums = [3, 1, 5, 4, 2], k = 2)", "output": "4", "numsteps": 619, "problem_id": [117, 0, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "easy"}
{"question_id": 3044, "id": "sample_422", "function_name": "minOperations", "code": "def minOperations(nums: List[int], k: int) -> int:\n    s = set()\n    for i, num in enumerate(reversed(nums)):\n        \n        if 1 <= num <= k:\n            s.add(num)\n        if len(s) == k:\n            return i + 1", "input": "minOperations(nums = [3, 1, 5, 4, 2], k = 2)", "output": "4", "numsteps": 621, "problem_id": [117, 8, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "easy"}
{"question_id": 3094, "id": "sample_423", "function_name": "minOperations", "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans", "input": "minOperations(nums = [2, 1, 2, 2, 3, 3])", "output": "-1", "numsteps": 600, "problem_id": [118, 6, 1], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3094, "id": "sample_424", "function_name": "minOperations", "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k,v in cs.items():\n        if v==1:\n            return -1\n        ans += (v+2)//3\n    return ans", "input": "minOperations(nums = [2, 3, 3, 2, 2, 4, 2, 3, 4])", "output": "4", "numsteps": 631, "problem_id": [118, 2, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3094, "id": "sample_425", "function_name": "minOperations", "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans", "input": "minOperations(nums = [2, 1, 2, 2, 3, 3])", "output": "-1", "numsteps": 617, "problem_id": [118, 9, 1], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3094, "id": "sample_426", "function_name": "minOperations", "code": "def minOperations(nums: List[int]) -> int:\n  c = {}\n  for x in nums:\n    c[x] = c.get(x, 0) + 1\n  ret = 0\n  for x in c.values():\n    if x < 2:\n      return -1\n    if x % 3 == 0:\n      ret += x // 3\n    elif x % 3 == 1:\n      ret += 2 + (x - 4) // 3\n    else:\n      ret += 1 + (x - 2) // 3\n  return ret", "input": "minOperations(nums = [2, 1, 2, 2, 3, 3])", "output": "-1", "numsteps": 639, "problem_id": [118, 12, 1], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3094, "id": "sample_427", "function_name": "minOperations", "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans", "input": "minOperations(nums = [2, 3, 3, 2, 2, 4, 2, 3, 4])", "output": "4", "numsteps": 853, "problem_id": [118, 14, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3094, "id": "sample_428", "function_name": "minOperations", "code": "from collections import Counter\n\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans", "input": "minOperations(nums = [2, 3, 3, 2, 2, 4, 2, 3, 4])", "output": "4", "numsteps": 701, "problem_id": [118, 11, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3080, "id": "sample_429", "function_name": "maxSubarrays", "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r", "input": "maxSubarrays(nums = [1, 0, 2, 0, 1, 2])", "output": "3", "numsteps": 736, "problem_id": [119, 5, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3080, "id": "sample_430", "function_name": "maxSubarrays", "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = 0, nums[0]\n    for n in nums[1:]: target &= n\n    if target != 0: return 1\n    cur = -1\n    for n in nums:\n        if cur == -1: cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res", "input": "maxSubarrays(nums = [1, 0, 2, 0, 1, 2])", "output": "3", "numsteps": 712, "problem_id": [119, 15, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3080, "id": "sample_431", "function_name": "maxSubarrays", "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans", "input": "maxSubarrays(nums = [1, 0, 2, 0, 1, 2])", "output": "3", "numsteps": 739, "problem_id": [119, 6, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3080, "id": "sample_432", "function_name": "maxSubarrays", "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    \n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)", "input": "maxSubarrays(nums = [1, 0, 2, 0, 1, 2])", "output": "3", "numsteps": 631, "problem_id": [119, 8, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3080, "id": "sample_433", "function_name": "maxSubarrays", "code": "def maxSubarrays(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    \n    if mn:\n        return 1\n    \n    res, cur = 0, nums[0]\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    \n    if cur == mn:\n        res += 1\n    \n    return res", "input": "maxSubarrays(nums = [1, 0, 2, 0, 1, 2])", "output": "3", "numsteps": 699, "problem_id": [119, 16, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3080, "id": "sample_434", "function_name": "maxSubarrays", "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans", "input": "maxSubarrays(nums = [1, 0, 2, 0, 1, 2])", "output": "3", "numsteps": 720, "problem_id": [119, 10, 0], "contest_id": "biweekly-contest-114", "contest_date": "2023-09-30T00:00:00", "difficulty": "medium"}
{"question_id": 3164, "id": "sample_435", "function_name": "lastVisitedIntegers", "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    res = []\n    a = []\n    k = 0\n    for word in words:\n        if word == 'prev':\n            k += 1\n            n = len(a)\n            if n >= k:\n                res.append(a[n-k])\n            else:\n                res.append(-1)\n        else:\n            a.append(int(word))\n            k = 0\n    return res", "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])", "output": "[2, 1, -1]", "numsteps": 673, "problem_id": [120, 4, 0], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "easy"}
{"question_id": 3164, "id": "sample_436", "function_name": "lastVisitedIntegers", "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    num = []\n    cnt = 0\n    ans = []\n    for word in words:\n        if word == \"prev\":\n            cnt += 1\n            if cnt <= len(num):\n                ans.append(num[- cnt])\n            else:\n                ans.append(-1)\n        else:\n            cnt = 0\n            num.append(int(word))\n    return ans", "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])", "output": "[2, 1, -1]", "numsteps": 662, "problem_id": [120, 13, 0], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "easy"}
{"question_id": 3164, "id": "sample_437", "function_name": "lastVisitedIntegers", "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    stk = []\n    i = 0\n    for x in words:\n        if x == 'prev':\n            i += 1\n            if i > len(stk):\n                ans.append(-1)\n            else:\n                ans.append(stk[-i])\n        else:\n            stk.append(int(x))\n            i = 0\n    return ans", "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])", "output": "[2, 1, -1]", "numsteps": 661, "problem_id": [120, 18, 0], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "easy"}
{"question_id": 3164, "id": "sample_438", "function_name": "lastVisitedIntegers", "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n\n    current = []\n    reached = -1\n    visited = []\n\n    for x in words:\n        if x != \"prev\":\n            current.append(int(x))\n            reached = len(current) - 1\n        elif reached >= 0:\n            visited.append(current[reached])\n            reached -= 1\n        else:\n            visited.append(-1)\n\n    return visited", "input": "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])", "output": "[1, 2, 1]", "numsteps": 662, "problem_id": [120, 21, 1], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "easy"}
{"question_id": 3164, "id": "sample_439", "function_name": "lastVisitedIntegers", "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    nums = []\n    r = 0\n    for x in words:\n        if x[0] == 'p':\n            r -= 1\n            ans.append(-1 if abs(r) > len(nums) else nums[len(nums)+r])\n        else:\n            nums.append(int(x))\n            r = 0\n            \n    return ans", "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])", "output": "[2, 1, -1]", "numsteps": 680, "problem_id": [120, 11, 0], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "easy"}
{"question_id": 3164, "id": "sample_440", "function_name": "lastVisitedIntegers", "code": "def lastVisitedIntegers(words: List[str]) -> List[int]:\n    ans = []\n    stk = []\n    c = 0\n    for w in words:\n        if w == \"prev\":\n            c += 1\n            if len(stk) < c:\n                ans.append(-1)\n            else:\n                ans.append(stk[-c])\n        else:\n            stk.append(int(w))\n            c = 0\n    return ans", "input": "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])", "output": "[2, 1, -1]", "numsteps": 661, "problem_id": [120, 3, 0], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "easy"}
{"question_id": 3091, "id": "sample_441", "function_name": "countSubMultisets", "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))", "input": "countSubMultisets(nums = [1, 2, 2, 3], l = 6, r = 6)", "output": "1", "numsteps": 966, "problem_id": [121, 11, 0], "contest_id": "biweekly-contest-115", "contest_date": "2023-10-14T00:00:00", "difficulty": "hard"}
{"question_id": 3163, "id": "sample_442", "function_name": "sumCounts", "code": "def sumCounts(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        curr = set()\n        for j in range(i, n):\n            curr.add(nums[j])\n            k = len(curr)\n            ans += k * k\n    return ans", "input": "sumCounts(nums = [1, 1])", "output": "3", "numsteps": 619, "problem_id": [122, 11, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "easy"}
{"question_id": 3163, "id": "sample_443", "function_name": "sumCounts", "code": "def sumCounts(nums: List[int]) -> int:\n    counts = []\n    for i in range(len(nums)):\n        hset = set()\n        for j in range(i, len(nums)):\n            hset.add(nums[j])\n            counts.append(len(hset))\n    ans = 0\n    for n in counts:\n        ans += n * n\n    return ans", "input": "sumCounts(nums = [1, 1])", "output": "3", "numsteps": 648, "problem_id": [122, 26, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "easy"}
{"question_id": 3163, "id": "sample_444", "function_name": "sumCounts", "code": "def sumCounts(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s = len(set(nums[i:j]))\n            ans += s * s\n    return ans", "input": "sumCounts(nums = [1, 1])", "output": "3", "numsteps": 613, "problem_id": [122, 19, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "easy"}
{"question_id": 3163, "id": "sample_445", "function_name": "sumCounts", "code": "def sumCounts(nums: List[int]) -> int:\n    ans=0\n    n=len(nums)\n    for i in range(n):\n        s=defaultdict(int)\n        for j in range(i,n):\n            s[nums[j]]+=1\n            ans+=len(s)*len(s)\n    return ans", "input": "sumCounts(nums = [1, 1])", "output": "3", "numsteps": 627, "problem_id": [122, 5, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "easy"}
{"question_id": 3163, "id": "sample_446", "function_name": "sumCounts", "code": "def sumCounts(nums: List[int]) -> int:\n    ans = 0\n    for i in range(len(nums)):\n        seen = set()\n        for j in range(i, len(nums)):\n            seen.add(nums[j])\n            ans += len(seen) * len(seen)\n    return ans", "input": "sumCounts(nums = [1, 1])", "output": "3", "numsteps": 617, "problem_id": [122, 17, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "easy"}
{"question_id": 3163, "id": "sample_447", "function_name": "sumCounts", "code": "def sumCounts(nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            l = len(set(nums[i:j + 1]))\n            ans += l * l\n    return ans", "input": "sumCounts(nums = [1, 1])", "output": "3", "numsteps": 633, "problem_id": [122, 3, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "easy"}
{"question_id": 3174, "id": "sample_448", "function_name": "minChanges", "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans", "input": "minChanges(s = '10')", "output": "1", "numsteps": 527, "problem_id": [123, 20, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3174, "id": "sample_449", "function_name": "minChanges", "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans", "input": "minChanges(s = '0000')", "output": "0", "numsteps": 527, "problem_id": [123, 15, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3174, "id": "sample_450", "function_name": "minChanges", "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans", "input": "minChanges(s = '1001')", "output": "2", "numsteps": 585, "problem_id": [123, 5, 0], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3174, "id": "sample_451", "function_name": "minChanges", "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res", "input": "minChanges(s = '1001')", "output": "2", "numsteps": 539, "problem_id": [123, 23, 0], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3174, "id": "sample_452", "function_name": "minChanges", "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result", "input": "minChanges(s = '1001')", "output": "2", "numsteps": 542, "problem_id": [123, 11, 0], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3174, "id": "sample_453", "function_name": "minChanges", "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans", "input": "minChanges(s = '10')", "output": "1", "numsteps": 519, "problem_id": [123, 16, 1], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3106, "id": "sample_454", "function_name": "lengthOfLongestSubsequence", "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1", "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)", "output": "-1", "numsteps": 817, "problem_id": [124, 8, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3106, "id": "sample_455", "function_name": "lengthOfLongestSubsequence", "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1", "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)", "output": "-1", "numsteps": 718, "problem_id": [124, 18, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3106, "id": "sample_456", "function_name": "lengthOfLongestSubsequence", "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1", "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)", "output": "-1", "numsteps": 706, "problem_id": [124, 13, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3106, "id": "sample_457", "function_name": "lengthOfLongestSubsequence", "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]", "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)", "output": "-1", "numsteps": 731, "problem_id": [124, 11, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3106, "id": "sample_458", "function_name": "lengthOfLongestSubsequence", "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]", "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)", "output": "-1", "numsteps": 710, "problem_id": [124, 14, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3106, "id": "sample_459", "function_name": "lengthOfLongestSubsequence", "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]", "input": "lengthOfLongestSubsequence(nums = [1, 1, 5, 4, 5], target = 3)", "output": "-1", "numsteps": 714, "problem_id": [124, 19, 2], "contest_id": "biweekly-contest-116", "contest_date": "2023-10-28T00:00:00", "difficulty": "medium"}
{"question_id": 3199, "id": "sample_460", "function_name": "distributeCandies", "code": "def distributeCandies(n: int, limit: int) -> int:\n  c = 0\n  for i in range(limit + 1):\n    for j in range(limit + 1):\n      for k in range(limit + 1):\n        if i + j + k == n:\n          c += 1\n  return c", "input": "distributeCandies(n = 5, limit = 2)", "output": "3", "numsteps": 985, "problem_id": [125, 13, 0], "contest_id": "biweekly-contest-117", "contest_date": "2023-11-11T00:00:00", "difficulty": "easy"}
{"question_id": 3199, "id": "sample_461", "function_name": "distributeCandies", "code": "def distributeCandies(n: int, limit: int) -> int:\n    res = comb(n + 2, 2)\n    if n >= limit + 1:\n        res -= 3 * comb(n - limit + 1, 2)\n    if n >= 2 * limit + 2:\n        res += 3 * comb(n - 2 * limit, 2)\n    if n >= 3 * (limit + 1):\n        res -= comb(n - 3 * limit - 1, 2)\n    return res", "input": "distributeCandies(n = 3, limit = 3)", "output": "10", "numsteps": 521, "problem_id": [125, 7, 1], "contest_id": "biweekly-contest-117", "contest_date": "2023-11-11T00:00:00", "difficulty": "easy"}
{"question_id": 3199, "id": "sample_462", "function_name": "distributeCandies", "code": "def distributeCandies(n: int, limit: int) -> int:\n    answer = 0\n    for c3 in range(limit + 1):\n        c1_min = max(0, n - c3 - limit)\n        c1_max = min(limit, n - c3)\n        \n        # print(c3, c1_min, c1_max)\n        \n        answer += max(c1_max - c1_min + 1, 0)\n        \n    return answer", "input": "distributeCandies(n = 3, limit = 3)", "output": "10", "numsteps": 635, "problem_id": [125, 2, 1], "contest_id": "biweekly-contest-117", "contest_date": "2023-11-11T00:00:00", "difficulty": "easy"}
{"question_id": 3199, "id": "sample_463", "function_name": "distributeCandies", "code": "def distributeCandies(n: int, limit: int) -> int:\n    limit = min(limit, n)\n    ans = 0\n    for i in range(limit+1):\n        if n-i > limit * 2:\n            continue\n        ans += (min(limit, n-i) - max(0, n-i-limit) + 1)\n    return ans", "input": "distributeCandies(n = 5, limit = 2)", "output": "3", "numsteps": 587, "problem_id": [125, 0, 0], "contest_id": "biweekly-contest-117", "contest_date": "2023-11-11T00:00:00", "difficulty": "easy"}
{"question_id": 3199, "id": "sample_464", "function_name": "distributeCandies", "code": "def distributeCandies(n: int, limit: int) -> int:\n    answer = 0 \n    for i in range(limit+1):\n        for j in range(limit+1):\n            k = n-i-j\n            if 0 <= k <= limit:\n                answer+=1\n    return answer", "input": "distributeCandies(n = 3, limit = 3)", "output": "10", "numsteps": 931, "problem_id": [125, 8, 1], "contest_id": "biweekly-contest-117", "contest_date": "2023-11-11T00:00:00", "difficulty": "easy"}
{"question_id": 3199, "id": "sample_465", "function_name": "distributeCandies", "code": "def distributeCandies(n: int, limit: int) -> int:\n    ans = 0\n    for a in range(limit+1):\n        for b in range(limit+1):\n            for c in range(limit+1):\n                if a+b+c == n: ans += 1\n    return ans", "input": "distributeCandies(n = 5, limit = 2)", "output": "3", "numsteps": 982, "problem_id": [125, 5, 0], "contest_id": "biweekly-contest-117", "contest_date": "2023-11-11T00:00:00", "difficulty": "easy"}
{"question_id": 3194, "id": "sample_466", "function_name": "findWordsContaining", "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    RES = []\n    for i, el in enumerate(words):\n        if x in el:\n            RES.append(i)\n    return RES", "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'a')", "output": "[0, 2]", "numsteps": 585, "problem_id": [127, 40, 1], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "easy"}
{"question_id": 3194, "id": "sample_467", "function_name": "findWordsContaining", "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    \n    l = []\n    for i in range(len(words)):\n        if x in words[i]:\n            l.append(i)\n    \n    return l", "input": "findWordsContaining(words = ['leet', 'code'], x = 'e')", "output": "[0, 1]", "numsteps": 567, "problem_id": [127, 45, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "easy"}
{"question_id": 3194, "id": "sample_468", "function_name": "findWordsContaining", "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    res = []\n    for i, w in enumerate(words):\n        if x in w:\n            res.append(i)\n    return res", "input": "findWordsContaining(words = ['leet', 'code'], x = 'e')", "output": "[0, 1]", "numsteps": 565, "problem_id": [127, 56, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "easy"}
{"question_id": 3194, "id": "sample_469", "function_name": "findWordsContaining", "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    res = []\n    for i in range(len(words)):\n        try:\n            b = words[i].find(x)\n            if (b >= 0):\n                res.append(i)\n        except:\n            pass\n    return res", "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'a')", "output": "[0, 2]", "numsteps": 625, "problem_id": [127, 33, 1], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "easy"}
{"question_id": 3194, "id": "sample_470", "function_name": "findWordsContaining", "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    res = []\n    for i, w in enumerate(words):\n        if x in w:\n            res.append(i)\n    return res", "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'z')", "output": "[]", "numsteps": 569, "problem_id": [127, 6, 2], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "easy"}
{"question_id": 3194, "id": "sample_471", "function_name": "findWordsContaining", "code": "def findWordsContaining(words: List[str], x: str) -> List[int]:\n    return [i for i, w in enumerate(words) if x in w]", "input": "findWordsContaining(words = ['abc', 'bcd', 'aaaa', 'cbc'], x = 'a')", "output": "[0, 2]", "numsteps": 580, "problem_id": [127, 44, 1], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "easy"}
{"question_id": 3209, "id": "sample_472", "function_name": "minimumCoins", "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]", "input": "minimumCoins(prices = [1, 10, 1, 1])", "output": "2", "numsteps": 732, "problem_id": [128, 35, 1], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3209, "id": "sample_473", "function_name": "minimumCoins", "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)", "input": "minimumCoins(prices = [3, 1, 2])", "output": "4", "numsteps": 963, "problem_id": [128, 49, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3209, "id": "sample_474", "function_name": "minimumCoins", "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)", "input": "minimumCoins(prices = [3, 1, 2])", "output": "4", "numsteps": 919, "problem_id": [128, 6, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3209, "id": "sample_475", "function_name": "minimumCoins", "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)", "input": "minimumCoins(prices = [3, 1, 2])", "output": "4", "numsteps": 934, "problem_id": [128, 21, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3209, "id": "sample_476", "function_name": "minimumCoins", "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]", "input": "minimumCoins(prices = [1, 10, 1, 1])", "output": "2", "numsteps": 779, "problem_id": [128, 38, 1], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3209, "id": "sample_477", "function_name": "minimumCoins", "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]", "input": "minimumCoins(prices = [3, 1, 2])", "output": "4", "numsteps": 716, "problem_id": [128, 37, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "medium"}
{"question_id": 3211, "id": "sample_478", "function_name": "findMaximumLength", "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]", "input": "findMaximumLength(nums = [5, 2, 2])", "output": "1", "numsteps": 792, "problem_id": [129, 0, 0], "contest_id": "biweekly-contest-118", "contest_date": "2023-11-25T00:00:00", "difficulty": "hard"}
